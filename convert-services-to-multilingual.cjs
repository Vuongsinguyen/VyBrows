// Script to convert services.json to individual multilingual JSON files
const fs = require('fs');
const path = require('path');

// Read the old services.json
const servicesData = JSON.parse(fs.readFileSync('./src/content/services.json', 'utf8'));

// Create services directory if not exists
const servicesDir = './src/data/services';
if (!fs.existsSync(servicesDir)) {
  fs.mkdirSync(servicesDir, { recursive: true });
}

// Translation helper (basic - you may want to enhance this)
const translations = {
  subtitle: {
    vi: {
      'Elevating Beauty, Simplifying Your Routine': 'N√¢ng T·∫ßm V·∫ª ƒê·∫πp, ƒê∆°n Gi·∫£n H√≥a Th√≥i Quen C·ªßa B·∫°n',
      'Clear Skin, Clear Confidence': 'L√†n Da S·∫°ch, T·ª± Tin R·∫°ng Ng·ªùi',
      'Restore Your Hair\'s Natural Vitality': 'Ph·ª•c H·ªìi S·ª©c S·ªëng T·ª± Nhi√™n Cho T√≥c',
      'Soft, Natural Gradient Brows': 'L√¥ng M√†y Chuy·ªÉn M√†u M·ªÅm M·∫°i, T·ª± Nhi√™n',
      'Hair-Like Strokes for Natural Brows': 'N√©t Nh∆∞ T√≥c Th·∫≠t Cho L√¥ng M√†y T·ª± Nhi√™n',
      'Ultra-Fine Hair Simulation Technology': 'C√¥ng Ngh·ªá M√¥ Ph·ªèng T√≥c Si√™u M·ªãn',
      'Define Your Eyes, Enhance Your Beauty': 'ƒê·ªãnh H√¨nh ƒê√¥i M·∫Øt, N√¢ng T·∫ßm V·∫ª ƒê·∫πp',
      'Beautiful, Youthful Lips Naturally Enhanced': 'ƒê√¥i M√¥i ƒê·∫πp, Tr·∫ª Trung ƒê∆∞·ª£c TƒÉng C∆∞·ªùng T·ª± Nhi√™n',
      'Restore Your Natural Lip Color': 'Ph·ª•c H·ªìi M√†u M√¥i T·ª± Nhi√™n'
    },
    ja: {
      'Elevating Beauty, Simplifying Your Routine': 'Áæé„Åó„Åï„ÇíÈ´ò„ÇÅ„ÄÅÊó•Â∏∏„ÇíÁ∞°Á¥†Âåñ',
      'Clear Skin, Clear Confidence': 'ÈÄèÊòéËÇå„ÄÅËºù„ÅèËá™‰ø°',
      'Restore Your Hair\'s Natural Vitality': 'È´™Êú¨Êù•„ÅÆÊ¥ªÂäõ„ÇíÂèñ„ÇäÊàª„Åô',
      'Soft, Natural Gradient Brows': '„ÇΩ„Éï„Éà„ÅßËá™ÁÑ∂„Å™„Ç∞„É©„Éá„Éº„Ç∑„Éß„É≥Áúâ',
      'Hair-Like Strokes for Natural Brows': 'Ëá™ÁÑ∂„Å™Áúâ„ÅÆ„Åü„ÇÅ„ÅÆÊØõ„ÅÆ„Çà„ÅÜ„Å™„Çπ„Éà„É≠„Éº„ÇØ',
      'Ultra-Fine Hair Simulation Technology': 'Ë∂ÖÂæÆÁ¥∞„Éò„Ç¢„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥ÊäÄË°ì',
      'Define Your Eyes, Enhance Your Beauty': 'ÁõÆ„ÇíÈöõÁ´ã„Åü„Åõ„ÄÅÁæé„Åó„Åï„ÇíÈ´ò„ÇÅ„Çã',
      'Beautiful, Youthful Lips Naturally Enhanced': 'Ëá™ÁÑ∂„Å´Áæé„Åó„ÅèËã•„ÄÖ„Åó„ÅÑÂîá',
      'Restore Your Natural Lip Color': 'Ëá™ÁÑ∂„Å™Âîá„ÅÆËâ≤„ÇíÂèñ„ÇäÊàª„Åô'
    },
    es: {
      'Elevating Beauty, Simplifying Your Routine': 'Elevando la Belleza, Simplificando tu Rutina',
      'Clear Skin, Clear Confidence': 'Piel Clara, Confianza Clara',
      'Restore Your Hair\'s Natural Vitality': 'Restaura la Vitalidad Natural de tu Cabello',
      'Soft, Natural Gradient Brows': 'Cejas Degradadas Suaves y Naturales',
      'Hair-Like Strokes for Natural Brows': 'Trazos como Pelo para Cejas Naturales',
      'Ultra-Fine Hair Simulation Technology': 'Tecnolog√≠a de Simulaci√≥n de Cabello Ultrafino',
      'Define Your Eyes, Enhance Your Beauty': 'Define tus Ojos, Realza tu Belleza',
      'Beautiful, Youthful Lips Naturally Enhanced': 'Labios Hermosos y Juveniles Mejorados Naturalmente',
      'Restore Your Natural Lip Color': 'Restaura el Color Natural de tus Labios'
    },
    ko: {
      'Elevating Beauty, Simplifying Your Routine': 'ÏïÑÎ¶ÑÎã§ÏõÄÏùÑ ÎÜíÏù¥Í≥† ÏùºÏÉÅÏùÑ Îã®ÏàúÌôîÌïòÏÑ∏Ïöî',
      'Clear Skin, Clear Confidence': 'Íπ®ÎÅóÌïú ÌîºÎ∂Ä, ÌôïÏã§Ìïú ÏûêÏã†Í∞ê',
      'Restore Your Hair\'s Natural Vitality': 'Î™®Î∞úÏùò ÏûêÏó∞Ïä§Îü¨Ïö¥ ÌôúÎ†• ÌöåÎ≥µ',
      'Soft, Natural Gradient Brows': 'Î∂ÄÎìúÎüΩÍ≥† ÏûêÏó∞Ïä§Îü¨Ïö¥ Í∑∏ÎùºÎç∞Ïù¥ÏÖò ÎààÏçπ',
      'Hair-Like Strokes for Natural Brows': 'ÏûêÏó∞Ïä§Îü¨Ïö¥ ÎààÏçπÏùÑ ÏúÑÌïú Î™®Î∞ú Í∞ôÏùÄ ÏÑ†',
      'Ultra-Fine Hair Simulation Technology': 'Ï¥àÎØ∏ÏÑ∏ Î™®Î∞ú ÏãúÎÆ¨Î†àÏù¥ÏÖò Í∏∞Ïà†',
      'Define Your Eyes, Enhance Your Beauty': 'ÎààÏùÑ Ï†ïÏùòÌïòÍ≥† ÏïÑÎ¶ÑÎã§ÏõÄÏùÑ Ìñ•ÏÉÅÏãúÌÇ§ÏÑ∏Ïöî',
      'Beautiful, Youthful Lips Naturally Enhanced': 'ÏûêÏó∞Ïä§ÎüΩÍ≤å Ìñ•ÏÉÅÎêú ÏïÑÎ¶ÑÎãµÍ≥† Ï†äÏùÄ ÏûÖÏà†',
      'Restore Your Natural Lip Color': 'ÏûêÏó∞Ïä§Îü¨Ïö¥ ÏûÖÏà† ÏÉâÏÉÅ Î≥µÏõê'
    }
  }
};

// Convert each service
servicesData.forEach(service => {
  console.log(`Converting ${service.slug}...`);
  
  const multilingualService = {
    slug: service.slug,
    title: service.title, // Already multilingual
    
    // Convert subtitle to multilingual
    subtitle: {
      en: service.subtitle || '',
      vi: translations.subtitle.vi[service.subtitle] || service.subtitle || '',
      ja: translations.subtitle.ja[service.subtitle] || service.subtitle || '',
      es: translations.subtitle.es[service.subtitle] || service.subtitle || '',
      ko: translations.subtitle.ko[service.subtitle] || service.subtitle || ''
    },
    
    // Note: For production, use proper translation API
    // For now, keeping English for complex content
    introduction: {
      en: service.introduction || '',
      vi: service.introduction || '', // TODO: Translate
      ja: service.introduction || '', // TODO: Translate
      es: service.introduction || '', // TODO: Translate
      ko: service.introduction || ''  // TODO: Translate
    },
    
    // Convert services array
    services: service.services?.map(s => ({
      name: {
        en: s.name || '',
        vi: s.name || '', // TODO: Translate
        ja: s.name || '',
        es: s.name || '',
        ko: s.name || ''
      },
      description: {
        en: s.description || '',
        vi: s.description || '', // TODO: Translate
        ja: s.description || '',
        es: s.description || '',
        ko: s.description || ''
      },
      options: {
        en: s.options || [],
        vi: s.options || [], // TODO: Translate
        ja: s.options || [],
        es: s.options || [],
        ko: s.options || []
      },
      result: {
        en: s.result || '',
        vi: s.result || '', // TODO: Translate
        ja: s.result || '',
        es: s.result || '',
        ko: s.result || ''
      }
    })) || [],
    
    whyChooseUs: {
      en: service.whyChooseUs || [],
      vi: service.whyChooseUs || [], // TODO: Translate
      ja: service.whyChooseUs || [],
      es: service.whyChooseUs || [],
      ko: service.whyChooseUs || []
    },
    
    closing: {
      en: service.closing || '',
      vi: service.closing || '', // TODO: Translate
      ja: service.closing || '',
      es: service.closing || '',
      ko: service.closing || ''
    },
    
    callToAction: {
      en: service.callToAction || '',
      vi: service.callToAction || '', // TODO: Translate
      ja: service.callToAction || '',
      es: service.callToAction || '',
      ko: service.callToAction || ''
    },
    
    description: service.description, // Already multilingual
    image: service.image,
    technologies: service.technologies || []
  };
  
  // Write to individual file
  const filePath = path.join(servicesDir, `${service.slug}.json`);
  fs.writeFileSync(filePath, JSON.stringify(multilingualService, null, 2));
  console.log(`‚úÖ Created: ${filePath}`);
});

console.log('\nüéâ Conversion complete! Created ' + servicesData.length + ' service files.');
console.log('\n‚ö†Ô∏è  NOTE: English content is currently used for all languages.');
console.log('   Please translate the content for vi, ja, es, ko languages.');
