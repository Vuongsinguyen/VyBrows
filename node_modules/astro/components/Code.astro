---
<<<<<<< HEAD
import type * as shiki from 'shiki';
import { renderToHtml } from 'shiki';
import { getHighlighter } from './Shiki.js';

interface Props {
=======
import type { ThemePresets } from '@astrojs/markdown-remark';
import type {
	BuiltinLanguage,
	LanguageRegistration,
	ShikiTransformer,
	SpecialLanguage,
	ThemeRegistration,
	ThemeRegistrationRaw,
} from 'shiki';
import { bundledLanguages } from 'shiki/langs';
import { getCachedHighlighter } from '../dist/core/shiki.js';
import type { HTMLAttributes } from '../types';

interface Props extends Omit<HTMLAttributes<'pre'>, 'lang'> {
>>>>>>> 08f40ceb (Initial)
	/** The code to highlight. Required. */
	code: string;
	/**
	 * The language of your code.
<<<<<<< HEAD
	 * Supports all languages listed here: https://github.com/shikijs/shiki/blob/main/docs/languages.md#all-languages
	 * Instructions for loading a custom language: https://github.com/shikijs/shiki/blob/main/docs/languages.md#supporting-your-own-languages-with-shiki
	 *
	 * @default "plaintext"
	 */
	lang?: shiki.Lang | shiki.ILanguageRegistration;
	/**
	 * The styling theme.
	 * Supports all themes listed here: https://github.com/shikijs/shiki/blob/main/docs/themes.md#all-themes
	 * Instructions for loading a custom theme: https://github.com/shikijs/shiki/blob/main/docs/themes.md#loading-theme
	 *
	 * @default "github-dark"
	 */
	theme?: shiki.IThemeRegistration;
=======
	 * Supports all languages listed here: https://shiki.style/languages
	 * Instructions for loading a custom language: https://shiki.style/guide/load-lang
	 *
	 * @default "plaintext"
	 */
	lang?: BuiltinLanguage | SpecialLanguage | LanguageRegistration;
	/**
	 * A metastring to pass to the highlighter.
	 * Allows passing information to transformers: https://shiki.style/guide/transformers#meta
	 *
	 * @default undefined
	 */
	meta?: string;
	/**
	 * The styling theme.
	 * Supports all themes listed here: https://shiki.style/themes
	 * Instructions for loading a custom theme: https://shiki.style/guide/load-theme
	 *
	 * @default "github-dark"
	 */
	theme?: ThemePresets | ThemeRegistration | ThemeRegistrationRaw;
	/**
	 * Multiple themes to style with -- alternative to "theme" option.
	 * Supports all themes found above; see https://shiki.style/guide/dual-themes for more information.
	 */
	themes?: Record<string, ThemePresets | ThemeRegistration | ThemeRegistrationRaw>;
	/**
	 * Chooses a theme from the "themes" option that you've defined as the default styling theme.
	 *  - <string>: one of the keys defined in the "themes" option. Will throw an error if the key is not defined.
	 *  - false: disabled. You'll have to apply the styling theme yourself. No effect if the "themes" option is not set.
	 *
	 * See https://shiki.style/guide/dual-themes#without-default-color for more information.
	 *
	 * @default "light"
	 */
	defaultColor?: 'light' | 'dark' | string | false;
>>>>>>> 08f40ceb (Initial)
	/**
	 * Enable word wrapping.
	 *  - true: enabled.
	 *  - false: disabled.
	 *  - null: All overflow styling removed. Code will overflow the element by default.
	 *
	 * @default false
	 */
	wrap?: boolean | null;
	/**
	 * Generate inline code element only, without the pre element wrapper.
	 *
	 * @default false
	 */
	inline?: boolean;
<<<<<<< HEAD
=======
	/**
	 * Shiki transformers to customize the generated HTML by manipulating the hast tree.
	 * Supports all transformers listed here: https://shiki.style/packages/transformers#transformers
	 * Instructions for custom transformers: https://shiki.style/guide/transformers
	 */
	transformers?: ShikiTransformer[];
>>>>>>> 08f40ceb (Initial)
}

const {
	code,
	lang = 'plaintext',
<<<<<<< HEAD
	theme = 'github-dark',
	wrap = false,
	inline = false,
} = Astro.props;

// 1. Get the shiki syntax highlighter
const highlighter = await getHighlighter({
	theme,
	// Load custom lang if passed an object, otherwise load the default
	langs: typeof lang !== 'string' ? [lang] : undefined,
});

// 2. Turn code into shiki theme tokens
const tokens = highlighter.codeToThemedTokens(code, typeof lang === 'string' ? lang : lang.id);

// 3. Get shiki theme object
const _theme = highlighter.getTheme();

// 4. Render the theme tokens as html
const html = renderToHtml(tokens, {
	themeName: _theme.name,
	fg: _theme.fg,
	bg: _theme.bg,
	elements: {
		pre({ className, style, children }) {
			// Swap to `code` tag if inline
			const tag = inline ? 'code' : 'pre';
			// Replace "shiki" class naming with "astro-code"
			className = className.replace(/shiki/g, 'astro-code');
			// Handle code wrapping
			// if wrap=null, do nothing.
			if (wrap === false) {
				style += '; overflow-x: auto;';
			} else if (wrap === true) {
				style += '; overflow-x: auto; white-space: pre-wrap; word-wrap: break-word;';
			}
			return `<${tag} class="${className}" style="${style}" tabindex="0">${children}</${tag}>`;
		},
		code({ children }) {
			return inline ? children : `<code>${children}</code>`;
		},
	},
=======
	meta,
	theme = 'github-dark',
	themes = {},
	defaultColor = 'light',
	wrap = false,
	inline = false,
	transformers = [],
	...rest
} = Astro.props;

// shiki 1.0 compat
if (typeof lang === 'object') {
	// `id` renamed to `name` (always override)
	if ((lang as any).id) {
		lang.name = (lang as any).id;
	}
	// `grammar` flattened to lang itself
	if ((lang as any).grammar) {
		Object.assign(lang, (lang as any).grammar);
	}
}

const highlighter = await getCachedHighlighter({
	langs: [
		typeof lang === 'string'
			? Object.keys(bundledLanguages).includes(lang)
				? lang
				: 'plaintext'
			: (lang as any),
	],
	theme,
	themes,
});

const html = await highlighter.codeToHtml(code, typeof lang === 'string' ? lang : lang.name, {
	defaultColor,
	wrap,
	inline,
	transformers,
	meta,
	attributes: rest as any,
>>>>>>> 08f40ceb (Initial)
});
---

<Fragment set:html={html} />
