<<<<<<< HEAD
=======
import { Logger } from "../core/logger/core.js";
>>>>>>> 08f40ceb (Initial)
import { nodeLogDestination } from "../core/logger/node.js";
function flagsToAstroInlineConfig(flags) {
  return {
    // Inline-only configs
    configFile: typeof flags.config === "string" ? flags.config : void 0,
    mode: typeof flags.mode === "string" ? flags.mode : void 0,
    logLevel: flags.verbose ? "debug" : flags.silent ? "silent" : void 0,
<<<<<<< HEAD
=======
    force: flags.force ? true : void 0,
>>>>>>> 08f40ceb (Initial)
    // Astro user configs
    root: typeof flags.root === "string" ? flags.root : void 0,
    site: typeof flags.site === "string" ? flags.site : void 0,
    base: typeof flags.base === "string" ? flags.base : void 0,
<<<<<<< HEAD
    markdown: {
      drafts: typeof flags.drafts === "boolean" ? flags.drafts : void 0
    },
    server: {
      port: typeof flags.port === "number" ? flags.port : void 0,
      host: typeof flags.host === "string" || typeof flags.host === "boolean" ? flags.host : void 0,
      open: typeof flags.open === "boolean" ? flags.open : void 0
    },
    experimental: {
      assets: typeof flags.experimentalAssets === "boolean" ? flags.experimentalAssets : void 0
    }
  };
}
function createLoggingFromFlags(flags) {
=======
    outDir: typeof flags.outDir === "string" ? flags.outDir : void 0,
    server: {
      port: typeof flags.port === "number" ? flags.port : void 0,
      host: typeof flags.host === "string" || typeof flags.host === "boolean" ? flags.host : void 0,
      open: typeof flags.open === "string" || typeof flags.open === "boolean" ? flags.open : void 0,
      allowedHosts: typeof flags.allowedHosts === "string" ? flags.allowedHosts.split(",") : typeof flags.allowedHosts === "boolean" && flags.allowedHosts === true ? flags.allowedHosts : []
    }
  };
}
function createLoggerFromFlags(flags) {
>>>>>>> 08f40ceb (Initial)
  const logging = {
    dest: nodeLogDestination,
    level: "info"
  };
  if (flags.verbose) {
    logging.level = "debug";
  } else if (flags.silent) {
    logging.level = "silent";
  }
<<<<<<< HEAD
  return logging;
}
export {
  createLoggingFromFlags,
=======
  return new Logger(logging);
}
export {
  createLoggerFromFlags,
>>>>>>> 08f40ceb (Initial)
  flagsToAstroInlineConfig
};
