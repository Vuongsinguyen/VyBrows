import _build from "../../core/build/index.js";
import { printHelp } from "../../core/messages.js";
import { flagsToAstroInlineConfig } from "../flags.js";
async function build({ flags }) {
<<<<<<< HEAD
  if ((flags == null ? void 0 : flags.help) || (flags == null ? void 0 : flags.h)) {
=======
  if (flags?.help || flags?.h) {
>>>>>>> 08f40ceb (Initial)
    printHelp({
      commandName: "astro build",
      usage: "[...flags]",
      tables: {
        Flags: [
<<<<<<< HEAD
          ["--drafts", `Include Markdown draft pages in the build.`],
=======
          ["--outDir <directory>", `Specify the output directory for the build.`],
          ["--mode", `Specify the mode of the project. Defaults to "production".`],
          [
            "--devOutput",
            "Output a development-based build similar to code transformed in `astro dev`."
          ],
          [
            "--force",
            "Clear the content layer and content collection cache, forcing a full rebuild."
          ],
>>>>>>> 08f40ceb (Initial)
          ["--help (-h)", "See all available flags."]
        ]
      },
      description: `Builds your site for deployment.`
    });
    return;
  }
  const inlineConfig = flagsToAstroInlineConfig(flags);
<<<<<<< HEAD
  await _build(inlineConfig, {
    teardownCompiler: true
  });
=======
  await _build(inlineConfig, { devOutput: !!flags.devOutput });
>>>>>>> 08f40ceb (Initial)
}
export {
  build
};
