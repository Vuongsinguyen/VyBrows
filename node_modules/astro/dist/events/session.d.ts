<<<<<<< HEAD
import type { AstroUserConfig } from '../@types/astro';
interface ConfigInfo {
    markdownPlugins: string[];
    adapter: string | null;
    integrations: string[];
    trailingSlash: undefined | 'always' | 'never' | 'ignore';
    build: undefined | {
        format: undefined | 'file' | 'directory';
    };
    markdown: undefined | {
        drafts: undefined | boolean;
        syntaxHighlight: undefined | 'shiki' | 'prism' | false;
    };
}
=======
import type { AstroUserConfig } from '../types/public/config.js';
>>>>>>> 08f40ceb (Initial)
interface EventPayload {
    cliCommand: string;
    config?: ConfigInfo;
    configKeys?: string[];
    flags?: string[];
    optionalIntegrations?: number;
}
<<<<<<< HEAD
export declare function eventCliSession(cliCommand: string, userConfig?: AstroUserConfig, flags?: Record<string, any>): {
=======
type ConfigInfoValue = string | boolean | string[] | undefined;
type ConfigInfoRecord = Record<string, ConfigInfoValue>;
type ConfigInfoBase = {
    [alias in keyof AstroUserConfig]: ConfigInfoValue | ConfigInfoRecord;
};
interface ConfigInfo extends ConfigInfoBase {
    build: ConfigInfoRecord;
    image: ConfigInfoRecord;
    markdown: ConfigInfoRecord;
    experimental: ConfigInfoRecord;
    legacy: ConfigInfoRecord;
    vite: ConfigInfoRecord | undefined;
}
export declare function eventCliSession(cliCommand: string, userConfig: AstroUserConfig, flags?: Record<string, any>): {
>>>>>>> 08f40ceb (Initial)
    eventName: string;
    payload: EventPayload;
}[];
export {};
