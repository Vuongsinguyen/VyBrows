import * as fs from "node:fs";
<<<<<<< HEAD
import { warn } from "../core/logger/core.js";
import notFoundTemplate, { subpathNotUsedTemplate } from "../template/4xx.js";
import { log404 } from "./common.js";
import { writeHtmlResponse } from "./response.js";
function baseMiddleware(settings, logging) {
=======
import path from "node:path";
import { appendForwardSlash } from "@astrojs/internal-helpers/path";
import { bold } from "kleur/colors";
import { notFoundTemplate, subpathNotUsedTemplate } from "../template/4xx.js";
import { writeHtmlResponse } from "./response.js";
function baseMiddleware(settings, logger) {
>>>>>>> 08f40ceb (Initial)
  const { config } = settings;
  const site = config.site ? new URL(config.base, config.site) : void 0;
  const devRootURL = new URL(config.base, "http://localhost");
  const devRoot = site ? site.pathname : devRootURL.pathname;
  const devRootReplacement = devRoot.endsWith("/") ? "/" : "";
  return function devBaseMiddleware(req, res, next) {
<<<<<<< HEAD
    var _a;
    const url = req.url;
    const pathname = decodeURI(new URL(url, "http://localhost").pathname);
=======
    const url = req.url;
    let pathname;
    try {
      pathname = decodeURI(new URL(url, "http://localhost").pathname);
    } catch (e) {
      return next(e);
    }
>>>>>>> 08f40ceb (Initial)
    if (pathname.startsWith(devRoot)) {
      req.url = url.replace(devRoot, devRootReplacement);
      return next();
    }
    if (pathname === "/" || pathname === "/index.html") {
<<<<<<< HEAD
      log404(logging, pathname);
      const html = subpathNotUsedTemplate(devRoot, pathname);
      return writeHtmlResponse(res, 404, html);
    }
    if ((_a = req.headers.accept) == null ? void 0 : _a.includes("text/html")) {
      log404(logging, pathname);
      const html = notFoundTemplate({
        statusCode: 404,
        title: "Not found",
        tabTitle: "404: Not Found",
        pathname
      });
=======
      const html = subpathNotUsedTemplate(devRoot, pathname);
      return writeHtmlResponse(res, 404, html);
    }
    if (req.headers.accept?.includes("text/html")) {
      const html = notFoundTemplate(pathname);
>>>>>>> 08f40ceb (Initial)
      return writeHtmlResponse(res, 404, html);
    }
    const publicPath = new URL("." + req.url, config.publicDir);
    fs.stat(publicPath, (_err, stats) => {
      if (stats) {
<<<<<<< HEAD
        const expectedLocation = new URL("." + url, devRootURL).pathname;
        warn(
          logging,
          "dev",
          `Requests for items in your public folder must also include your base. ${url} should be ${expectedLocation}. Omitting the base will break in production.`
        );
        res.writeHead(301, {
          Location: expectedLocation
        });
        res.end();
=======
        const publicDir = appendForwardSlash(
          path.posix.relative(config.root.pathname, config.publicDir.pathname)
        );
        const expectedLocation = new URL(devRootURL.pathname + url, devRootURL).pathname;
        logger.error(
          "router",
          `Request URLs for ${bold(
            publicDir
          )} assets must also include your base. "${expectedLocation}" expected, but received "${url}".`
        );
        const html = subpathNotUsedTemplate(devRoot, pathname);
        return writeHtmlResponse(res, 404, html);
>>>>>>> 08f40ceb (Initial)
      } else {
        next();
      }
    });
  };
}
export {
  baseMiddleware
};
