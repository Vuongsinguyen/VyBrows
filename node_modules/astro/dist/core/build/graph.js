import { ASTRO_PAGE_RESOLVED_MODULE_ID } from "./plugins/plugin-pages.js";
<<<<<<< HEAD
function* walkParentInfos(id, ctx, until, depth = 0, order = 0, seen = /* @__PURE__ */ new Set(), childId = "") {
=======
function getParentExtendedModuleInfos(id, ctx, until, depth = 0, order = 0, childId = "", seen = /* @__PURE__ */ new Set(), accumulated = []) {
>>>>>>> 08f40ceb (Initial)
  seen.add(id);
  const info = ctx.getModuleInfo(id);
  if (info) {
    if (childId) {
      const idx = info.importedIds.indexOf(childId);
      if (idx === -1) {
        order += info.importedIds.length;
        order += info.dynamicallyImportedIds.indexOf(childId);
      } else {
        order += idx;
      }
    }
<<<<<<< HEAD
    yield [info, depth, order];
  }
  if (until == null ? void 0 : until(id))
    return;
  const importers = ((info == null ? void 0 : info.importers) || []).concat((info == null ? void 0 : info.dynamicImporters) || []);
  for (const imp of importers) {
    if (seen.has(imp)) {
      continue;
    }
    yield* walkParentInfos(imp, ctx, until, depth + 1, order, seen, id);
  }
}
function moduleIsTopLevelPage(info) {
  var _a, _b;
  return ((_a = info.importers[0]) == null ? void 0 : _a.includes(ASTRO_PAGE_RESOLVED_MODULE_ID)) || ((_b = info.dynamicImporters[0]) == null ? void 0 : _b.includes(ASTRO_PAGE_RESOLVED_MODULE_ID));
}
function* getTopLevelPages(id, ctx) {
  for (const res of walkParentInfos(id, ctx)) {
    if (moduleIsTopLevelPage(res[0])) {
      yield res;
    }
  }
}
export {
  getTopLevelPages,
  moduleIsTopLevelPage,
  walkParentInfos
=======
    accumulated.push({ info, depth, order });
  }
  if (info && !until?.(id)) {
    const importers = info.importers.concat(info.dynamicImporters);
    for (const imp of importers) {
      if (!seen.has(imp)) {
        getParentExtendedModuleInfos(imp, ctx, until, depth + 1, order, id, seen, accumulated);
      }
    }
  }
  return accumulated;
}
function getParentModuleInfos(id, ctx, until, seen = /* @__PURE__ */ new Set(), accumulated = []) {
  seen.add(id);
  const info = ctx.getModuleInfo(id);
  if (info) {
    accumulated.push(info);
  }
  if (info && !until?.(id)) {
    const importers = info.importers.concat(info.dynamicImporters);
    for (const imp of importers) {
      if (!seen.has(imp)) {
        getParentModuleInfos(imp, ctx, until, seen, accumulated);
      }
    }
  }
  return accumulated;
}
function moduleIsTopLevelPage(info) {
  return info.importers[0]?.includes(ASTRO_PAGE_RESOLVED_MODULE_ID) || info.dynamicImporters[0]?.includes(ASTRO_PAGE_RESOLVED_MODULE_ID);
}
function getTopLevelPageModuleInfos(id, ctx) {
  return getParentModuleInfos(id, ctx).filter(moduleIsTopLevelPage);
}
export {
  getParentExtendedModuleInfos,
  getParentModuleInfos,
  getTopLevelPageModuleInfos,
  moduleIsTopLevelPage
>>>>>>> 08f40ceb (Initial)
};
