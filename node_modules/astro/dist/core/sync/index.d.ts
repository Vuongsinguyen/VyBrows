<<<<<<< HEAD
/// <reference types="node" />
import fsMod from 'node:fs';
import type { AstroInlineConfig, AstroSettings } from '../../@types/astro';
import { type LogOptions } from '../logger/core.js';
export type ProcessExit = 0 | 1;
export type SyncOptions = {
    /**
     * Only used for testing
     * @internal
     */
    fs?: typeof fsMod;
};
export type SyncInternalOptions = SyncOptions & {
    logging: LogOptions;
};
export declare function sync(inlineConfig: AstroInlineConfig, options?: SyncOptions): Promise<ProcessExit>;
/**
 * Generate content collection types, and then returns the process exit signal.
 *
 * A non-zero process signal is emitted in case there's an error while generating content collection types.
 *
 * This should only be used when the callee already has an `AstroSetting`, otherwise use `sync()` instead.
 * @internal
 *
 * @param {SyncOptions} options
 * @param {AstroSettings} settings Astro settings
 * @param {typeof fsMod} options.fs The file system
 * @param {LogOptions} options.logging Logging options
 * @return {Promise<ProcessExit>}
 */
export declare function syncInternal(settings: AstroSettings, { logging, fs }: SyncInternalOptions): Promise<ProcessExit>;
=======
import fsMod from 'node:fs';
import { type FSWatcher } from 'vite';
import type { AstroSettings, RoutesList } from '../../types/astro.js';
import type { AstroInlineConfig } from '../../types/public/config.js';
import type { SSRManifest } from '../app/types.js';
import type { Logger } from '../logger/core.js';
type SyncOptions = {
    mode: string;
    logger: Logger;
    settings: AstroSettings;
    force?: boolean;
    skip?: {
        content?: boolean;
        cleanup?: boolean;
    };
    routesList: RoutesList;
    manifest: SSRManifest;
    command: 'build' | 'dev' | 'sync';
    watcher?: FSWatcher;
};
export default function sync(inlineConfig: AstroInlineConfig, { fs, telemetry: _telemetry }?: {
    fs?: typeof fsMod;
    telemetry?: boolean;
}): Promise<void>;
/**
 * Clears the content layer and content collection cache, forcing a full rebuild.
 */
export declare function clearContentLayerCache({ settings, logger, fs, isDev, }: {
    settings: AstroSettings;
    logger: Logger;
    fs?: typeof fsMod;
    isDev: boolean;
}): Promise<void>;
/**
 * Generates TypeScript types for all Astro modules. This sets up a `src/env.d.ts` file for type inferencing,
 * and defines the `astro:content` module for the Content Collections API.
 *
 * @experimental The JavaScript API is experimental
 */
export declare function syncInternal({ mode, logger, fs, settings, skip, force, routesList, command, watcher, manifest, }: SyncOptions): Promise<void>;
export {};
>>>>>>> 08f40ceb (Initial)
