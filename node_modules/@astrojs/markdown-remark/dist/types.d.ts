<<<<<<< HEAD
import type * as hast from 'hast';
import type * as mdast from 'mdast';
import type { all as Handlers, one as Handler, Options as RemarkRehypeOptions } from 'remark-rehype';
import type { ILanguageRegistration, IThemeRegistration, Theme } from 'shiki';
import type * as unified from 'unified';
import type { VFile } from 'vfile';
export type { Node } from 'unist';
export type MarkdownAstroData = {
    frontmatter: Record<string, any>;
};
=======
import type { RemotePattern } from '@astrojs/internal-helpers/remote';
import type * as hast from 'hast';
import type * as mdast from 'mdast';
import type { Options as RemarkRehypeOptions } from 'remark-rehype';
import type { BuiltinTheme } from 'shiki';
import type * as unified from 'unified';
import type { CreateShikiHighlighterOptions, ShikiHighlighterHighlightOptions } from './shiki.js';
export type { Node } from 'unist';
declare module 'vfile' {
    interface DataMap {
        astro: {
            headings?: MarkdownHeading[];
            localImagePaths?: string[];
            remoteImagePaths?: string[];
            frontmatter?: Record<string, any>;
        };
    }
}
>>>>>>> 08f40ceb (Initial)
export type RemarkPlugin<PluginParameters extends any[] = any[]> = unified.Plugin<PluginParameters, mdast.Root>;
export type RemarkPlugins = (string | [string, any] | RemarkPlugin | [RemarkPlugin, any])[];
export type RehypePlugin<PluginParameters extends any[] = any[]> = unified.Plugin<PluginParameters, hast.Root>;
export type RehypePlugins = (string | [string, any] | RehypePlugin | [RehypePlugin, any])[];
<<<<<<< HEAD
export type RemarkRehype = Omit<RemarkRehypeOptions, 'handlers' | 'unknownHandler'> & {
    handlers?: typeof Handlers;
    handler?: typeof Handler;
};
export interface ShikiConfig {
    langs?: ILanguageRegistration[];
    theme?: Theme | IThemeRegistration;
    wrap?: boolean | null;
}
export interface AstroMarkdownOptions {
    drafts?: boolean;
    syntaxHighlight?: 'shiki' | 'prism' | false;
=======
export type RemarkRehype = RemarkRehypeOptions;
export type ThemePresets = BuiltinTheme | 'css-variables';
export type SyntaxHighlightConfigType = 'shiki' | 'prism';
export interface SyntaxHighlightConfig {
    type: SyntaxHighlightConfigType;
    excludeLangs?: string[];
}
export interface ShikiConfig extends Pick<CreateShikiHighlighterOptions, 'langs' | 'theme' | 'themes' | 'langAlias'>, Pick<ShikiHighlighterHighlightOptions, 'defaultColor' | 'wrap' | 'transformers'> {
}
/**
 * Configuration options that end up in the markdown section of AstroConfig
 */
export interface AstroMarkdownOptions {
    syntaxHighlight?: SyntaxHighlightConfig | SyntaxHighlightConfigType | false;
>>>>>>> 08f40ceb (Initial)
    shikiConfig?: ShikiConfig;
    remarkPlugins?: RemarkPlugins;
    rehypePlugins?: RehypePlugins;
    remarkRehype?: RemarkRehype;
    gfm?: boolean;
    smartypants?: boolean;
}
<<<<<<< HEAD
export interface ImageMetadata {
    src: string;
    width: number;
    height: number;
    type: string;
}
export interface MarkdownRenderingOptions extends AstroMarkdownOptions {
    /** @internal */
    fileURL?: URL;
    /** @internal */
    $?: {
        scopedClassName: string | null;
    };
    /** Used for frontmatter injection plugins */
    frontmatter?: Record<string, any>;
    experimentalAssets?: boolean;
=======
/**
 * Extra configuration options from other parts of AstroConfig that get injected into this plugin
 */
export interface AstroMarkdownProcessorOptions extends AstroMarkdownOptions {
    image?: {
        domains?: string[];
        remotePatterns?: RemotePattern[];
    };
    experimentalHeadingIdCompat?: boolean;
}
export interface MarkdownProcessor {
    render: (content: string, opts?: MarkdownProcessorRenderOptions) => Promise<MarkdownProcessorRenderResult>;
}
export interface MarkdownProcessorRenderOptions {
    /** Used for frontmatter injection plugins */
    frontmatter?: Record<string, any>;
}
export interface MarkdownProcessorRenderResult {
    code: string;
    metadata: {
        headings: MarkdownHeading[];
        localImagePaths: string[];
        remoteImagePaths: string[];
        frontmatter: Record<string, any>;
    };
>>>>>>> 08f40ceb (Initial)
}
export interface MarkdownHeading {
    depth: number;
    slug: string;
    text: string;
}
<<<<<<< HEAD
export interface MarkdownMetadata {
    headings: MarkdownHeading[];
    source: string;
    html: string;
}
export interface MarkdownVFile extends VFile {
    data: {
        __astroHeadings?: MarkdownHeading[];
        imagePaths?: Set<string>;
    };
}
export interface MarkdownRenderingResult {
    metadata: MarkdownMetadata;
    vfile: MarkdownVFile;
    code: string;
}
=======
>>>>>>> 08f40ceb (Initial)
