/**
<<<<<<< HEAD
 * @typedef {import('../types.js').Root} Root
 * @typedef {import('../types.js').Parent} Parent
 * @typedef {import('../types.js').State} State
=======
 * @import {Parents, Root} from 'hast'
 * @import {State} from '../index.js'
>>>>>>> 08f40ceb (Initial)
 */
/**
 * Serialize a root.
 *
 * @param {Root} node
 *   Node to handle.
 * @param {number | undefined} _1
 *   Index of `node` in `parent.
<<<<<<< HEAD
 * @param {Parent | undefined} _2
=======
 * @param {Parents | undefined} _2
>>>>>>> 08f40ceb (Initial)
 *   Parent of `node`.
 * @param {State} state
 *   Info passed around about the current state.
 * @returns {string}
 *   Serialized node.
 */
<<<<<<< HEAD
export function root(
  node: Root,
  _1: number | undefined,
  _2: Parent | undefined,
  state: State
): string
export type Root = import('../types.js').Root
export type Parent = import('../types.js').Parent
export type State = import('../types.js').State
=======
export function root(node: Root, _1: number | undefined, _2: Parents | undefined, state: State): string;
import type { Root } from 'hast';
import type { Parents } from 'hast';
import type { State } from '../index.js';
//# sourceMappingURL=root.d.ts.map
>>>>>>> 08f40ceb (Initial)
