/**
<<<<<<< HEAD
 * @typedef {import('micromark-util-types').Event} Event
 */

/**
 * @typedef {'left' | 'center' | 'right' | 'none'} Align
=======
 * @import {Event} from 'micromark-util-types'
 */

/**
 * @typedef {'center' | 'left' | 'none' | 'right'} Align
>>>>>>> 08f40ceb (Initial)
 */

/**
 * Figure out the alignment of a GFM table.
 *
<<<<<<< HEAD
 * @param {Array<Event>} events
 * @param {number} index
 * @returns {Array<Align>}
 */
export function gfmTableAlign(events, index) {
  let inDelimiterRow = false
  /** @type {Array<Align>} */
  const align = []
  while (index < events.length) {
    const event = events[index]
=======
 * @param {Readonly<Array<Event>>} events
 *   List of events.
 * @param {number} index
 *   Table enter event.
 * @returns {Array<Align>}
 *   List of aligns.
 */
export function gfmTableAlign(events, index) {
  let inDelimiterRow = false;
  /** @type {Array<Align>} */
  const align = [];
  while (index < events.length) {
    const event = events[index];
>>>>>>> 08f40ceb (Initial)
    if (inDelimiterRow) {
      if (event[0] === 'enter') {
        // Start of alignment value: set a new column.
        // To do: `markdown-rs` uses `tableDelimiterCellValue`.
        if (event[1].type === 'tableContent') {
<<<<<<< HEAD
          align.push(
            events[index + 1][1].type === 'tableDelimiterMarker'
              ? 'left'
              : 'none'
          )
=======
          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');
>>>>>>> 08f40ceb (Initial)
        }
      }
      // Exits:
      // End of alignment value: change the column.
      // To do: `markdown-rs` uses `tableDelimiterCellValue`.
      else if (event[1].type === 'tableContent') {
        if (events[index - 1][1].type === 'tableDelimiterMarker') {
<<<<<<< HEAD
          const alignIndex = align.length - 1
          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right'
=======
          const alignIndex = align.length - 1;
          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';
>>>>>>> 08f40ceb (Initial)
        }
      }
      // Done!
      else if (event[1].type === 'tableDelimiterRow') {
<<<<<<< HEAD
        break
      }
    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {
      inDelimiterRow = true
    }
    index += 1
  }
  return align
}
=======
        break;
      }
    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {
      inDelimiterRow = true;
    }
    index += 1;
  }
  return align;
}
>>>>>>> 08f40ceb (Initial)
