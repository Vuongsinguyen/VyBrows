/**
<<<<<<< HEAD
 * @typedef {import('../types.js').Handle} Handle
 * @typedef {import('../types.js').Info} Info
 * @typedef {import('../types.js').Parent} Parent
 * @typedef {import('../types.js').PhrasingContent} PhrasingContent
 * @typedef {import('../types.js').State} State
 */
/**
=======
>>>>>>> 08f40ceb (Initial)
 * Serialize the children of a parent that contains phrasing children.
 *
 * These children will be joined flush together.
 *
<<<<<<< HEAD
 * @param {Parent & {children: Array<PhrasingContent>}} parent
=======
 * @param {PhrasingParents} parent
>>>>>>> 08f40ceb (Initial)
 *   Parent of flow nodes.
 * @param {State} state
 *   Info passed around about the current state.
 * @param {Info} info
 *   Info on where we are in the document we are generating.
 * @returns {string}
 *   Serialized children, joined together.
 */
<<<<<<< HEAD
export function containerPhrasing(
  parent: import('../types.js').Parent & {
    children: Array<PhrasingContent>
  },
  state: State,
  info: Info
): string
export type Handle = import('../types.js').Handle
export type Info = import('../types.js').Info
export type Parent = import('../types.js').Parent
export type PhrasingContent = import('../types.js').PhrasingContent
export type State = import('../types.js').State
=======
export function containerPhrasing(parent: PhrasingParents, state: State, info: Info): string;
import type { PhrasingParents } from '../types.js';
import type { State } from 'mdast-util-to-markdown';
import type { Info } from 'mdast-util-to-markdown';
//# sourceMappingURL=container-phrasing.d.ts.map
>>>>>>> 08f40ceb (Initial)
