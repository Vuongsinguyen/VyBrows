/**
<<<<<<< HEAD
 * @typedef {import('./schema.js').Properties} Properties
 * @typedef {import('./schema.js').Normal} Normal
=======
 * @import {Info, Space} from 'property-information'
>>>>>>> 08f40ceb (Initial)
 */

import {Schema} from './schema.js'

/**
<<<<<<< HEAD
 * @param {Schema[]} definitions
 * @param {string} [space]
 * @returns {Schema}
 */
export function merge(definitions, space) {
  /** @type {Properties} */
  const property = {}
  /** @type {Normal} */
  const normal = {}
  let index = -1

  while (++index < definitions.length) {
    Object.assign(property, definitions[index].property)
    Object.assign(normal, definitions[index].normal)
=======
 * @param {ReadonlyArray<Schema>} definitions
 *   Definitions.
 * @param {Space | undefined} [space]
 *   Space.
 * @returns {Schema}
 *   Schema.
 */
export function merge(definitions, space) {
  /** @type {Record<string, Info>} */
  const property = {}
  /** @type {Record<string, string>} */
  const normal = {}

  for (const definition of definitions) {
    Object.assign(property, definition.property)
    Object.assign(normal, definition.normal)
>>>>>>> 08f40ceb (Initial)
  }

  return new Schema(property, normal, space)
}
