<<<<<<< HEAD
export default function rehypeStringify(
  this:
    | import('unified').Processor<
        void,
        import('hast').Root,
        import('hast').Root,
        string
      >
    | import('unified').Processor<
        void,
        import('hast').Comment,
        import('hast').Comment,
        string
      >
    | import('unified').Processor<
        void,
        import('hast').DocType,
        import('hast').DocType,
        string
      >
    | import('unified').Processor<
        void,
        import('hast').Element,
        import('hast').Element,
        string
      >
    | import('unified').Processor<
        void,
        import('hast').Text,
        import('hast').Text,
        string
      >
    | import('unified').Processor<
        void,
        import('hast-util-raw/complex-types.js').Raw,
        import('hast-util-raw/complex-types.js').Raw,
        string
      >,
  ...settings:
    | [(import('hast-util-to-html/lib/types.js').Options | undefined)?]
    | void[]
): void
export type Root = import('hast').Root
export type Node = Root | Root['children'][number]
export type Options = import('hast-util-to-html').Options
=======
/**
 * Plugin to add support for serializing as HTML.
 *
 * @param {Options | null | undefined} [options]
 *   Configuration (optional).
 * @returns {undefined}
 *   Nothing.
 */
export default function rehypeStringify(options?: Options | null | undefined): undefined;
export default class rehypeStringify {
    /**
     * Plugin to add support for serializing as HTML.
     *
     * @param {Options | null | undefined} [options]
     *   Configuration (optional).
     * @returns {undefined}
     *   Nothing.
     */
    constructor(options?: Options | null | undefined);
    compiler: (tree: Root, file: import("vfile").VFile) => string;
}
import type { Options } from 'hast-util-to-html';
import type { Root } from 'hast';
//# sourceMappingURL=index.d.ts.map
>>>>>>> 08f40ceb (Initial)
