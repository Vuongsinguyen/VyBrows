/**
<<<<<<< HEAD
 * @typedef {import('micromark-util-types').Event} Event
 * @typedef {import('micromark-util-types').Resolver} Resolver
 * @typedef {import('micromark-util-types').TokenizeContext} TokenizeContext
=======
 * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'
>>>>>>> 08f40ceb (Initial)
 */
/**
 * Call all `resolveAll`s.
 *
<<<<<<< HEAD
 * @param {Array<{resolveAll?: Resolver | undefined}>} constructs
=======
 * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs
>>>>>>> 08f40ceb (Initial)
 *   List of constructs, optionally with `resolveAll`s.
 * @param {Array<Event>} events
 *   List of events.
 * @param {TokenizeContext} context
 *   Context used by `tokenize`.
 * @returns {Array<Event>}
 *   Changed events.
 */
<<<<<<< HEAD
export function resolveAll(
  constructs: Array<{
    resolveAll?: Resolver | undefined
  }>,
  events: Array<import('micromark-util-types').Event>,
  context: TokenizeContext
): Array<import('micromark-util-types').Event>
export type Event = import('micromark-util-types').Event
export type Resolver = import('micromark-util-types').Resolver
export type TokenizeContext = import('micromark-util-types').TokenizeContext
=======
export function resolveAll(constructs: ReadonlyArray<{
    resolveAll?: Resolver | undefined;
}>, events: Array<Event>, context: TokenizeContext): Array<Event>;
import type { Resolver } from 'micromark-util-types';
import type { Event } from 'micromark-util-types';
import type { TokenizeContext } from 'micromark-util-types';
//# sourceMappingURL=index.d.ts.map
>>>>>>> 08f40ceb (Initial)
