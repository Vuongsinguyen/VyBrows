---
import '/src/styles/color.css';
import '/src/styles/global.css';
import NewsLayout from '../../../layouts/NewsLayout.astro';
import BannerFix from '../../../components/UI/section/BannerFix.astro';
import trainingData from '../../../data/trainingLoader.js';

export const prerender = true;

export async function getStaticPaths() {
  const langs = ['vi', 'ja', 'es', 'ko'];
  return langs.flatMap(lang => {
    return trainingData.map(training => ({ 
      params: { 
        lang: lang, 
        training: training.slug 
      } 
    }));
  });
}

const { lang, training: trainingSlug } = Astro.params;

const trainingTitles = trainingData.reduce((acc, training) => {
  acc[training.slug] = (training.title as any)[lang] || training.title.en;
  return acc;
}, {} as Record<string, string>);

const currentTraining = trainingData.find(t => t.slug === trainingSlug) as any;
---

<NewsLayout title={trainingTitles[trainingSlug] || 'Training'}>
  <BannerFix 
    title={trainingTitles[trainingSlug] || 'Training'} 
    subtitle="Professional Training Program"
    showBreadcrumb={true}
    breadcrumbItems={[
      { href: `/${lang}/training`, label: 'Training' },
      { href: `/${lang}/training/${trainingSlug}`, label: trainingTitles[trainingSlug] || 'Course' }
    ]}
  />

  <div class="w-full bg-surface flex justify-center">
    <div class="w-full max-w-7xl bg-surface flex flex-col lg:flex-row gap-6 items-start px-6 py-8">
      <aside class="w-full lg:w-64 bg-surface rounded-lg lg:mt-0 lg:sticky lg:top-32 z-20 order-1">
        <ul class="rounded-lg overflow-hidden flex flex-col">
          {trainingData.map((training) => (
            <li>
              <a 
                href={`/${lang}/training/${training.slug}`} 
                class={`block rounded-none px-3 py-2 font-normal transition-colors flex items-center gap-2 ${training.slug === trainingSlug ? 'font-semibold' : 'hover:text-primary'}`}
                style={training.slug === trainingSlug ? 'color: var(--color-primary);' : 'color: rgba(0, 0, 0, 0.7);'}
              >
                <img src="/images/diamond.svg" alt="" class="w-8 h-8 flex-shrink-0" />
                <span>{(training.title as any)[lang] || training.title.en}</span>
              </a>
            </li>
          ))}
        </ul>
      </aside>

      <main class="flex-1 space-y-12 order-2">
        <div class="bg-white rounded-lg shadow-sm border border-gray-100 p-8">
          <h1 class="text-3xl font-bold mb-2 text-on-surface">{trainingTitles[trainingSlug] ?? trainingSlug}</h1>
          
          {currentTraining?.subtitle && (
            <p class="text-xl text-primary font-semibold mb-6">
              {typeof currentTraining.subtitle === 'object' ? (currentTraining.subtitle as any)[lang] || currentTraining.subtitle.en : currentTraining.subtitle}
            </p>
          )}

          {currentTraining?.image && (
            <img
              src={currentTraining.image}
              alt={trainingTitles[trainingSlug] ?? trainingSlug}
              class="w-full rounded-lg shadow-lg mb-6"
            />
          )}

          {currentTraining?.introduction && (
            <p class="text-lg text-on-surface mb-6 leading-relaxed">
              {typeof currentTraining.introduction === 'object' ? (currentTraining.introduction as any)[lang] || currentTraining.introduction.en : currentTraining.introduction}
            </p>
          )}
        </div>
      </main>
    </div>
  </div>
</NewsLayout>
