---
import '/src/styles/color.css';
import '/src/styles/global.css';
import NewsLayout from '../../../layouts/NewsLayout.astro';
import BannerFix from '../../../components/UI/section/BannerFix.astro';
import { getAllServices } from '../../../data/servicesLoader.js';

export const prerender = true;

export async function getStaticPaths() {
  const servicesData = getAllServices();
  const langs = ['vi', 'ja', 'es', 'ko'];
  return langs.flatMap(lang => {
    return servicesData.map(service => ({ 
      params: { 
        lang: lang, 
        service: service.slug 
      } 
    }));
  });
}

const servicesData = getAllServices();
const lang = Astro.params.lang as 'en' | 'vi' | 'ja' | 'es' | 'ko';
const serviceSlug = Astro.params.service as string;

// Helper function to get multilingual content (supports both old and new format)
const getContent = (content: any, lang: string, fallback = '') => {
  if (!content) return fallback;
  // New format: {en: "...", vi: "...", ...}
  if (typeof content === 'object' && !Array.isArray(content)) {
    return content[lang] || content.en || fallback;
  }
  // Old format: direct string or lang object
  if (typeof content === 'string') return content;
  return content[lang] || content.en || fallback;
};

// Create service labels for sidebar
const serviceLabels = servicesData.reduce((acc, service) => {
  acc[service.slug] = getContent(service.title, lang, service.slug);
  return acc;
}, {} as Record<string, string>);

// Create service content
const serviceContent = servicesData.reduce((acc, service) => {
  acc[service.slug] = service.description;
  return acc;
}, {} as Record<string, Record<string, string>>);

// Get current service for meta
const currentService = servicesData.find(s => s.slug === serviceSlug);
const serviceTitle = `${serviceLabels[serviceSlug] || 'Service'} - VyBrows Academy`;
const serviceDescription = currentService?.description?.[lang] || currentService?.description?.en
  ? `${(currentService.description[lang] || currentService.description.en).substring(0, 155)}...` 
  : 'Professional permanent makeup services by certified PMU artists at VyBrows Academy. Expert techniques, safe procedures, stunning natural results.';
---

<NewsLayout title={serviceTitle} description={serviceDescription}>
  <BannerFix 
    title={serviceLabels[serviceSlug] || 'Our Services'} 
    subtitle="Professional Beauty Services"
    showBreadcrumb={true}
    breadcrumbItems={[
      { href: `/${lang}/service`, label: 'Services' },
      { href: `/${lang}/service/${serviceSlug}`, label: serviceLabels[serviceSlug] || 'Service' }
    ]}
  />

  <!-- Main Content -->
  <div class="w-full bg-surface flex justify-center">
    <div class="w-full max-w-7xl bg-surface flex flex-col lg:flex-row gap-6 items-start px-6 py-8">
      <!-- Left Sidebar -->
      <aside class="w-full lg:w-64 bg-surface rounded-lg lg:mt-0 lg:sticky lg:top-32 z-20 order-1">
        <ul class="rounded-lg overflow-hidden flex flex-col">
          {servicesData.map((service, index) => (
            <li>
              <a 
                href={`/${lang}/service/${service.slug}`} 
                class={`block rounded-none px-3 py-2 font-normal transition-colors flex items-center gap-2 ${service.slug === serviceSlug ? 'font-semibold' : 'hover:text-primary'}`}
                style={service.slug === serviceSlug ? 'color: var(--color-primary);' : 'color: rgba(0, 0, 0, 0.7);'}
              >
                <img src="/images/diamond.svg" alt="" class="w-8 h-8 flex-shrink-0" />
                <span>{(service.title as any)[lang] || service.title.en}</span>
              </a>
            </li>
          ))}
        </ul>
      </aside>

      <!-- Main Content -->
      <main class="flex-1 space-y-8 order-2">
        {(() => {
          const currentService = servicesData.find(s => s.slug === serviceSlug) as any;
          return (
            <>
              {/* Title - Changed from H1 to H2 to avoid duplicate H1 (already have H1 in hero) */}
              <h2 class="text-3xl font-bold mb-2 text-on-surface">{serviceLabels[serviceSlug] ?? serviceSlug}</h2>
              
              {/* Subtitle */}
              {currentService?.subtitle && (
                <p class="text-xl text-primary font-semibold mb-4">{getContent(currentService.subtitle, lang)}</p>
              )}

              {/* Image */}
              {currentService?.image && (
                <img
                  src={currentService.image}
                  alt={serviceLabels[serviceSlug] ?? serviceSlug}
                  class="w-full rounded-lg shadow-lg mb-6"
                />
              )}

              {/* Introduction */}
              {currentService?.introduction && (
                <p class="text-lg text-on-surface mb-6 leading-relaxed">{getContent(currentService.introduction, lang)}</p>
              )}

              {/* Services List */}
              {currentService?.services && currentService.services.length > 0 && (
                <div class="space-y-6">
                  <h2 class="text-2xl font-bold text-primary mb-4">
                    {lang === 'vi' ? 'D·ªãch v·ª• c·ªßa ch√∫ng t√¥i' : lang === 'ja' ? 'ÁßÅ„Åü„Å°„ÅÆ„Çµ„Éº„Éì„Çπ' : lang === 'es' ? 'Nuestros Servicios' : lang === 'ko' ? 'Ïö∞Î¶¨Ïùò ÏÑúÎπÑÏä§' : 'Our Services'}
                  </h2>
                  {currentService.services.map((service: any) => (
                    <div class="bg-surface-1 rounded-xl p-6" style="border: 1px solid rgba(1, 81, 58, 0.1);">
                      <h3 class="text-xl font-bold text-primary mb-3">{getContent(service.name, lang)}</h3>
                      <p class="text-on-surface mb-4">{getContent(service.description, lang)}</p>
                      {service.options && (() => {
                        const options = getContent(service.options, lang, []);
                        const optionsArray = Array.isArray(options) ? options : [options];
                        return optionsArray.length > 0 && (
                          <ul class="space-y-2 mb-4">
                            {optionsArray.map((option: string) => (
                              <li class="flex items-start gap-2">
                                <span class="text-primary mt-1">‚Ä¢</span>
                                <span class="text-on-surface">{option}</span>
                              </li>
                            ))}
                          </ul>
                        );
                      })()}
                      {service.result && (
                        <p class="text-primary font-semibold italic">{getContent(service.result, lang)}</p>
                      )}
                    </div>
                  ))}
                </div>
              )}

              {/* Why Choose Us */}
              {currentService?.whyChooseUs && (() => {
                const reasons = getContent(currentService.whyChooseUs, lang, '');
                const reasonsArray = Array.isArray(reasons) ? reasons : [];
                return reasonsArray.length > 0 && (
                  <div class="bg-primary/5 rounded-xl p-6" style="border: 1px solid rgba(1, 81, 58, 0.1);">
                    <h2 class="text-2xl font-bold text-primary mb-4">
                      {lang === 'vi' ? 'T·∫°i sao ch·ªçn ch√∫ng t√¥i?' : lang === 'ja' ? 'ÁßÅ„Åü„Å°„ÇíÈÅ∏„Å∂ÁêÜÁî±' : lang === 'es' ? '¬øPor qu√© elegirnos?' : lang === 'ko' ? 'Ïôú Ïö∞Î¶¨Î•º ÏÑ†ÌÉùÌï¥Ïïº Ìï†ÍπåÏöî?' : 'Why Choose Us?'}
                    </h2>
                    <ul class="space-y-3">
                      {reasonsArray.map((reason: string) => (
                        <li class="flex items-start gap-3">
                          <span class="w-2 h-2 bg-primary rounded-full mt-2"></span>
                          <span class="text-on-surface">{reason}</span>
                        </li>
                      ))}
                    </ul>
                  </div>
                );
              })()}

              {/* Technologies & Equipment (old format fallback) */}
              {currentService?.technologies && (
                <div class="bg-surface-1 rounded-xl p-6" style="border: 1px solid rgba(1, 81, 58, 0.1);">
                  <h2 class="text-xl font-bold text-primary mb-4">
                    {lang === 'vi' ? 'C√¥ng ngh·ªá & Thi·∫øt b·ªã' : lang === 'ja' ? 'ÊäÄË°ì„ÉªË®≠ÂÇô' : lang === 'es' ? 'Tecnolog√≠a y Equipos' : lang === 'ko' ? 'Í∏∞Ïà† Î∞è Ïû•ÎπÑ' : 'Technologies & Equipment'}
                  </h2>
                  <div class="grid grid-cols-2 md:grid-cols-3 gap-3">
                    {currentService.technologies.map((tech: string) => (
                      <div class="flex items-center gap-2">
                        <span class="w-2 h-2 bg-primary rounded-full"></span>
                        <span class="text-on-surface">{tech}</span>
                      </div>
                    ))}
                  </div>
                </div>
              )}

              {/* Closing */}
              {currentService?.closing && (
                <p class="text-lg text-on-surface leading-relaxed italic border-l-4 border-primary pl-4">{getContent(currentService.closing, lang)}</p>
              )}

              {/* CTA Section */}
              <div class="bg-primary/10 rounded-xl p-6 text-center" style="border: 1px solid rgba(1, 81, 58, 0.1);">
                <h3 class="text-xl font-bold text-primary mb-2">
                  {(() => {
                    const cta = getContent(currentService?.callToAction, lang, '');
                    return cta ? cta.split('üìç')[0] : 
                      (lang === 'vi' ? 'S·∫µn s√†ng tr·∫£i nghi·ªám d·ªãch v·ª• c·ªßa ch√∫ng t√¥i?' : 
                       lang === 'ja' ? '„Çµ„Éº„Éì„Çπ„Çí„Åî‰ΩìÈ®ì„ÅÑ„Åü„Å†„ÅèÊ∫ñÂÇô„ÅØ„Åß„Åç„Åæ„Åó„Åü„ÅãÔºü' : 
                       lang === 'es' ? '¬øListo para experimentar nuestros servicios?' : 
                       lang === 'ko' ? 'Ï†ÄÌù¨ ÏÑúÎπÑÏä§Î•º Í≤ΩÌóòÌï† Ï§ÄÎπÑÍ∞Ä ÎêòÏÖ®ÎÇòÏöî?' : 
                       'Ready to Experience Our Services?');
                  })()}
                </h3>
                <p class="text-on-surface mb-4">
                  {(() => {
                    const cta = getContent(currentService?.callToAction, lang, '');
                    return cta ? cta.split('üìç')[1] : 
                      (lang === 'vi' ? 'ƒê·∫∑t l·ªãch t∆∞ v·∫•n ngay h√¥m nay v√† kh√°m ph√° s·ª± kh√°c bi·ªát c·ªßa VyBrows Academy.' : 
                       lang === 'ja' ? '‰ªä„Åô„Åê„Ç≥„É≥„Çµ„É´„ÉÜ„Éº„Ç∑„Éß„É≥„Çí„Åî‰∫àÁ¥Ñ„ÅÑ„Åü„Å†„Åç„ÄÅVyBrows Academy„ÅÆÈÅï„ÅÑ„Çí„Åî‰ΩìÈ®ì„Åè„Å†„Åï„ÅÑ„ÄÇ' : 
                       lang === 'es' ? 'Reserve su consulta hoy y descubra la diferencia de VyBrows Academy.' : 
                       lang === 'ko' ? 'Ïò§Îäò ÏÉÅÎã¥ÏùÑ ÏòàÏïΩÌïòÍ≥† VyBrows AcademyÏùò Ï∞®Ïù¥Ï†êÏùÑ Î∞úÍ≤¨Ìï¥Î≥¥ÏÑ∏Ïöî.' : 
                       'Book your consultation today and discover the VyBrows Academy difference.');
                  })()}
                </p>
                <a
                  href="https://www.fresha.com/vi/a/vy-brows-academy-houston-13192-bellaire-boulevard-ksjqvy55"
                  target="_blank"
                  rel="nofollow noopener noreferrer"
                  class="inline-flex items-center justify-center px-6 py-3 rounded-lg font-bold text-base shadow transition-colors focus:outline-none focus-visible:ring-2 hover:opacity-90"
                  style="background-color: var(--color-primary); color: white;"
                >
                  {lang === 'vi' ? 'ƒê·∫∑t l·ªãch ngay' : lang === 'ja' ? '‰ªä„Åô„Åê‰∫àÁ¥Ñ' : lang === 'es' ? 'Reservar ahora' : lang === 'ko' ? 'ÏßÄÍ∏à ÏòàÏïΩ' : 'Book Now'}
                </a>
              </div>
            </>
          );
        })()}
      </main>
    </div>
  </div>
</NewsLayout>
