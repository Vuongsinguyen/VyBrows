---
import Button from '../shared/Button.astro';

export interface Slide {
  title: string;
  subtitle: string;
  description: string;
  primaryButton: string;
  secondaryButton: string;
  backgroundGradient: string;
}

export interface Props {
  slides: Slide[];
  autoSlideInterval?: number;
  class?: string;
}

// doubled the default slide display time from 6000ms to 12000ms
const { slides, autoSlideInterval = 13000, class: customClass = '' } = Astro.props;
---

<section class={`relative overflow-hidden z-0 h-[70vh] min-h-[680px] max-h-[60vh] pb-[50px] ${customClass}`}> 
  
  <!-- Canvas cho fireflies -->
  <canvas class="fireflies absolute top-0 left-0 w-full h-full z-[2] pointer-events-none"></canvas>

  <div class="slider-container relative h-[70vh] min-h-[680px] max-h-[60vh] pb-[50px] z-[1]" style="background: var(--slider-bg);">
    {slides.map((slide, index) => (
      <div class={`slide ${index === 0 ? 'active' : ''} flex items-center justify-center`}>
        <div
          class="w-full max-w-[1180px] h-[90%] rounded-[2rem] border mt-[310px] pb-[30px] mb-[80px] mx-[20px] overflow-hidden relative"
          style="border-color: #e7d48e; box-shadow: 0 8px 32px 0 rgba(0,0,0,0.18); background: transparent; padding-bottom: 30px;"
        >
          <!-- Static slide image -->
          <img
            src={`/images/Slide/slide${(index+1).toString().padStart(2, '0')}.avif`}
            alt={`slide${(index+1).toString().padStart(2, '0')}`}
            class="w-full h-full object-cover rounded-[2rem]"
          />
        </div>
      </div>
    ))}

    <!-- Navigation -->
    <div class="absolute bottom-6 left-1/2 transform -translate-x-1/2 flex space-x-2">
      {slides.map((_, index) => (
        <button 
          class={`dot w-3 h-3 rounded-full transition-all duration-300${index === 0 ? ' active' : ''}`}
          data-slide={index}
        ></button>
      ))}
    </div>

    <!-- Arrows -->
    <button class="prev-btn absolute left-4 top-1/2 transform -translate-y-1/2 p-2 rounded-full transition-all" style="background-color: var(--slider-arrow-bg);">
      <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="rgba(231, 212, 142, 0.3)">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </button>
    <button class="next-btn absolute right-4 top-1/2 transform -translate-y-1/2 p-2 rounded-full transition-all" style="background-color: var(--slider-arrow-bg);">
      <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="rgba(231, 212, 142, 0.3)">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </button>
  </div>
</section>

<style>
  .slider-container {
    position: relative;
    overflow: hidden;
    z-index: 1;
    background: #003324 !important;
  }
  .slide {
    position: absolute; top: 0; left: 0;
    width: 100%; height: 100%;
    opacity: 0; transition: opacity 0.5s ease-in-out;
    background: transparent !important;
  }
  .slide.active { opacity: 1; }
  .dot { background-color: rgba(231, 212, 142, 0.3); }
  .dot.active { background-color: var(--color-blueWhite); }
  .fireflies { z-index: 2; }
</style>

<script define:vars={{ autoSlideInterval }}>
  document.addEventListener('DOMContentLoaded', function() {
    const slides = document.querySelectorAll('.slide');
    const dots   = document.querySelectorAll('.dot');
    const nextBtn = document.querySelector('.next-btn');
    const prevBtn = document.querySelector('.prev-btn');
    const sliderContainer = document.querySelector('.slider-container');

    let currentSlide = 0;
    let autoSlideTimeoutId: number;

    function showSlide(index: number) {
      slides.forEach(s => s.classList.remove('active'));
      dots.forEach(d => d.classList.remove('active'));
      if (slides[index]) slides[index].classList.add('active');
      if (dots[index])    dots[index].classList.add('active');
      currentSlide = index;
    }

    function nextSlide() { showSlide((currentSlide + 1) % slides.length); }
    function prevSlide() { showSlide((currentSlide - 1 + slides.length) % slides.length); }

    function scheduleNext() {
      clearTimeout(autoSlideTimeoutId);
      autoSlideTimeoutId = window.setTimeout(() => {
        nextSlide();
        scheduleNext();
      }, autoSlideInterval);
    }

    // start the cycle
    scheduleNext();

    // controls
    nextBtn?.addEventListener('click', () => { 
      clearTimeout(autoSlideTimeoutId);
      nextSlide();
      scheduleNext();
    });
    prevBtn?.addEventListener('click', () => { 
      clearTimeout(autoSlideTimeoutId);
      prevSlide();
      scheduleNext();
    });
    dots.forEach((dot, i) => dot.addEventListener('click', () => {
      clearTimeout(autoSlideTimeoutId);
      showSlide(i);
      scheduleNext();
    }));

    // pause on hover
    sliderContainer?.addEventListener('mouseenter', () => clearTimeout(autoSlideTimeoutId));
    sliderContainer?.addEventListener('mouseleave',   scheduleNext);
  });
</script>