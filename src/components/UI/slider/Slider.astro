---
import Button from '../shared/Button.astro';

export interface Slide {
  title: string;
  subtitle: string;
  description: string;
  primaryButton: string;
  secondaryButton: string;
  backgroundGradient: string;
}

export interface Props {
  slides: Slide[];
  autoSlideInterval?: number;
  class?: string;
}

const { slides, autoSlideInterval = 4000, class: customClass = '' } = Astro.props;
---

<section class={`relative overflow-hidden z-0 h-[70vh] ${customClass}`}> 
  <div class="slider-container relative h-[70vh]" style="background: var(--slider-bg);">
    {slides.map((slide, index) => (
      <div class={`slide ${index === 0 ? 'active' : ''} flex items-center justify-center`}>
        <div
          class="w-full max-w-[1180px] h-[480px] rounded-[2rem] border mx-auto mt-[60px]"
          style="border-color: #e7d48e; box-shadow: 0 8px 32px 0 rgba(0,0,0,0.18); background: transparent;"
        >
          {/* Nội dung slide ở đây */}
        </div>
      </div>
    ))}

    <!-- Navigation Controls -->
    <div class="absolute bottom-6 left-1/2 transform -translate-x-1/2 flex space-x-2">
      {slides.map((_, index) => (
        <button 
          class={`dot w-3 h-3 rounded-full transition-all duration-300${index === 0 ? ' active' : ''}`}
          data-slide={index}
        ></button>
      ))}
    </div>

    <!-- Arrow Navigation -->
    <button class="prev-btn absolute left-4 top-1/2 transform -translate-y-1/2 p-2 rounded-full transition-all" style="background-color: var(--slider-arrow-bg);">
      <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="rgba(231, 212, 142, 0.3)" style="opacity:1;">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
      </svg>
    </button>
    <button class="next-btn absolute right-4 top-1/2 transform -translate-y-1/2 p-2 rounded-full transition-all" style="background-color: var(--slider-arrow-bg);">
      <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="rgba(231, 212, 142, 0.3)" style="opacity:1;">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
      </svg>
    </button>
  </div>
</section>

<style>
  .slider-container {
    position: relative;
    overflow: hidden;
    z-index: 1;
    background: #003324 !important;
  }

  .slide {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  opacity: 0;
  transition: opacity 0.5s ease-in-out;
  background: transparent !important;
  }

  .slide.active {
    opacity: 1;
  }

  .dot {
    background-color: rgba(231, 212, 142, 0.3);
  }
  .dot.active {
    background-color: var(--color-blueWhite);
  }

  /* Responsive text sizes */
  @media (max-width: 768px) {
    .slide h1 {
      font-size: 2.5rem;
    }
    .slide p {
      font-size: 1rem;
    }
  }
</style>

<script define:vars={{ autoSlideInterval }}>
  document.addEventListener('DOMContentLoaded', function() {
    const slides = document.querySelectorAll('.slide');
    const dots = document.querySelectorAll('.dot');
    const nextBtn = document.querySelector('.next-btn');
    const prevBtn = document.querySelector('.prev-btn');
    
    let currentSlide = 0;
    let autoSlideIntervalId;

    function showSlide(index) {
      slides.forEach(slide => slide.classList.remove('active'));
      dots.forEach(dot => dot.classList.remove('active'));
      if (slides[index]) slides[index].classList.add('active');
      if (dots[index]) dots[index].classList.add('active');
      currentSlide = index;
    }

    function nextSlide() {
      const next = (currentSlide + 1) % slides.length;
      showSlide(next);
    }

    function prevSlide() {
      const prev = (currentSlide - 1 + slides.length) % slides.length;
      showSlide(prev);
    }

    function startAutoSlide() {
      autoSlideIntervalId = setInterval(nextSlide, autoSlideInterval);
    }

    function stopAutoSlide() {
      if (autoSlideIntervalId) {
        clearInterval(autoSlideIntervalId);
        autoSlideIntervalId = null;
      }
    }

    // Event listeners
    nextBtn?.addEventListener('click', () => {
      stopAutoSlide();
      nextSlide();
      startAutoSlide();
    });

    prevBtn?.addEventListener('click', () => {
      stopAutoSlide();
      prevSlide();
      startAutoSlide();
    });

    dots.forEach((dot, index) => {
      dot.addEventListener('click', () => {
        stopAutoSlide();
        showSlide(index);
        startAutoSlide();
      });
    });

    // Pause auto-slide on hover
    const sliderContainer = document.querySelector('.slider-container');
    sliderContainer?.addEventListener('mouseenter', stopAutoSlide);
    sliderContainer?.addEventListener('mouseleave', startAutoSlide);

    // Initialize
    startAutoSlide();
  });
</script>
