---
export interface Props {
  uc: {
    name: string;
    category: string;
    industry: string;
    teamSize: number;
    months: number;
    description: string;
    techs: Array<{ name: string; color: string }>;
  };
  expanded?: boolean;
  onMouseEnter?: () => void;
  onMouseLeave?: () => void;
  onClick?: () => void;
}

const {
  uc = {
    name: '',
    category: '',
    industry: '',
    teamSize: 0,
    months: 0,
    description: '',
    techs: []
  },
  expanded = false,
  onMouseEnter,
  onMouseLeave,
  onClick
} = Astro.props;
---

<div
  class={`usecase-card bg-white/80 dark:bg-gray-800/80 backdrop-blur-md rounded-2xl p-6 border border-white/20 shadow hover:scale-105 transition-all flex flex-col${expanded ? ' expanded' : ''}`}
>
  <div class="flex justify-between items-center mb-2">
    <div class="text-xl font-bold text-gray-800 dark:text-white">{uc?.name}</div>
    {uc?.category && (
      <span class="text-xs px-2 py-1 rounded bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400">{uc.category}</span>
    )}
  </div>
  <div class="flex items-center gap-2 mb-2">
    {uc?.industry && <span class="text-sm text-gray-500 dark:text-gray-400">{uc.industry}</span>}
    {typeof uc?.teamSize === 'number' && (
      <span class="text-xs px-2 py-1 rounded bg-green-100 dark:bg-green-900/30 text-green-600 dark:text-green-400">Team: {uc.teamSize}</span>
    )}
    {typeof uc?.months === 'number' && (
      <span class="text-xs px-2 py-1 rounded bg-yellow-100 dark:bg-yellow-900/30 text-yellow-700 dark:text-yellow-400">{uc.months} months</span>
    )}
  </div>
  {uc?.description && (
    <div class="text-gray-700 dark:text-gray-300 mb-2">{uc.description}</div>
  )}
  {Array.isArray(uc?.techs) && uc.techs.length > 0 && (
    <div class="flex flex-wrap gap-2 mt-2">
      {uc.techs.map(t => (
        <span class={`px-2 py-1 rounded text-xs text-white ${t.color}`}>{t.name}</span>
      ))}
    </div>
  )}
</div>