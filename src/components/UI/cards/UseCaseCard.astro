---
export interface Props {
  uc: {
    name: string;
    category: string;
    industry: string;
    teamSize: number;
    months: number;
    description: string;
    techs: Array<{ name: string; color: string }>;
  };
  expanded?: boolean;
  avatarIndex?: number;
  onMouseEnter?: () => void;
  onMouseLeave?: () => void;
  onClick?: () => void;
}

const {
  uc = {
    name: '',
    category: '',
    industry: '',
    teamSize: 0,
    months: 0,
    description: '',
    techs: []
  },
  expanded = false,
  avatarIndex = 0,
  onMouseEnter,
  onMouseLeave,
  onClick
} = Astro.props;
---

<div
  class={`usecase-card bg-white/80 dark:bg-gray-800/80 backdrop-blur-md rounded-2xl p-6 border border-white/20 shadow hover:scale-105 transition-all flex flex-col${expanded ? ' expanded' : ''}`}
>
  <div class="flex items-center mb-2">
    <div class="flex-shrink-0 mr-4">
      <img src={`https://randomuser.me/api/portraits/women/${avatarIndex % 100}.jpg`} alt="Avatar" class="w-[76px] h-[76px] rounded-full object-cover border-2 border-yellow-300 shadow" />
    </div>
    <div class="flex flex-col items-start">
      <div class="text-xl font-bold text-gray-800 dark:text-white font-lora" style="font-family: 'Lora', serif;">{uc?.name}</div>
      <div class="flex justify-start items-center mt-1">
        {[...Array(5)].map((_, i) => (
          <span>
            <svg xmlns="http://www.w3.org/2000/svg" width="22" height="22" fill="#FFD700" viewBox="0 0 24 24" class="mx-0.5">
              <path d="M12 17.27L18.18 21l-1.64-7.03L22 9.24l-7.19-.61L12 2 9.19 8.63 2 9.24l5.46 4.73L5.82 21z"/>
            </svg>
          </span>
        ))}
      </div>
    </div>
  </div>
  {uc?.description && (
    <div class="text-gray-700 dark:text-gray-300 mb-2">{uc.description}</div>
  )}
</div>