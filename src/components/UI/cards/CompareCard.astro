---
export interface Props {
  before: string;
  after: string;
  altBefore?: string;
  altAfter?: string;
  width?: number;
  height?: number;
}

const {
  before,
  after,
  altBefore = "Before",
  altAfter  = "After",
  width     = 600,
  height    = 400
} = Astro.props;
---

<style>
:root { /* --handle-size no longer needed */ }

.compare-container {
  position: relative;
  width: 100%;
  max-width: var(--max-w);
  height: var(--h);
  overflow: hidden;
}

.compare-base,
.compare-overlay {
  position: absolute;
  top: 0; left: 0;
  width: 100%; height: 100%;
}

.compare-base img,
.compare-overlay img {
  width: 100%; height: 100%;
  object-fit: cover;
  pointer-events: none;
  user-select: none;
}

.compare-overlay {
  z-index: 2;
  /* mask via clip-path */
  clip-path: inset(0 50% 0 0);
}

.compare-slider {
  position: absolute;
  top: 0; bottom: 0;
  left: 50%;
  width: 2px;               /* straight line */
  transform: translateX(-1px);
  cursor: ew-resize;
  z-index: 3;
  background: #2196F3;       /* give the slider a color */
}

.compare-label {
  position: absolute;
  top: 0.5rem;
  background: rgba(0,0,0,0.5);
  color: #fff;
  padding: 0.25rem 0.5rem;
  border-radius: 0.25rem;
  font-size: 0.875rem;
  z-index: 4;
}
.compare-label.before { left: 0.5rem; }
.compare-label.after  { right: 0.5rem; }
</style>

<div
  class="compare-container"
  style={`--max-w:${width}px;--h:${height}px;`}
>
  <div class="compare-base">
    <img src={after}  alt={altAfter}  loading="lazy" />
  </div>

  <div class="compare-overlay">
    <img src={before} alt={altBefore} loading="lazy" />
  </div>

  <div
    class="compare-slider"
    role="slider"
    tabindex="0"
    aria-valuemin="0"
    aria-valuemax="100"
    aria-valuenow="50"
  ></div>

  <div class="compare-label before">{altBefore}</div>
  <div class="compare-label after">{altAfter}</div>
</div>

<script is:client="load">
(() => {
  document.querySelectorAll('.compare-container').forEach(container => {
    const overlay = container.querySelector('.compare-overlay');
    const slider  = container.querySelector('.compare-slider');
    let dragging = false;
    let pct      = 50;

    const update = newPct => {
      pct = Math.max(0, Math.min(100, newPct));
      overlay.style.clipPath = `inset(0 ${100 - pct}% 0 0)`;
      slider.style.left      = `${pct}%`;
      slider.setAttribute('aria-valuenow', pct.toFixed(0));
    };

    const onMove = e => {
      if (!dragging) return;
      const rect = container.getBoundingClientRect();
      const clientX = e.changedTouches ? e.changedTouches[0].clientX : e.clientX;
      const newPct = ((clientX - rect.left) / rect.width) * 100;
      update(newPct);
    };

    slider.addEventListener('mousedown',   e => { e.preventDefault(); dragging = true; });
    window.addEventListener('mousemove',   onMove);
    window.addEventListener('mouseup',     () => dragging = false);

    slider.addEventListener('touchstart',  () => dragging = true);
    window.addEventListener('touchmove',   onMove);
    window.addEventListener('touchend',    () => dragging = false);

    slider.addEventListener('keydown', e => {
      if (e.key === 'ArrowLeft')  update(pct - 1);
      if (e.key === 'ArrowRight') update(pct + 1);
    });

    window.addEventListener('resize', () => update(pct));

    // init center
    update(pct);
  });
})();
</script>