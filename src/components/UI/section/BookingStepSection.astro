---
// BookingStepSection.astro - Multi-step booking UI
---
---
// BookingStepSection.astro - Multi-step booking UI
---

<section id="booking-step-section" class="booking-step-section max-w-2xl mx-auto py-16 px-4 bg-white rounded-2xl shadow-lg">
  <style>
    /* Horizontal Step Layout */
    #booking-steps {
      display: flex;
      flex-direction: column;
      min-height: 600px;
      overflow: visible; /* Ensure content is not clipped */
      position: relative;
    }

    .steps-container {
      display: flex;
      width: 400%; /* 4 steps x 100% each */
      transition: transform 0.5s cubic-bezier(0.4, 0, 0.2, 1);
      position: relative;
      overflow: visible; /* Ensure content is not clipped */
    }

    .step {
      flex: 1;
      padding: 20px;
      background: white;
      border-radius: 0 0 16px 16px;
      opacity: 1;
      visibility: visible;
      pointer-events: auto;
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
      min-height: 500px;
      width: 25%; /* Each step takes 25% of container */
      position: relative;
      z-index: 1;
    }

    .step-transitioning .steps-container {
      transition: transform 0.3s ease;
    }

    /* Step Indicator Styles - Horizontal Progress */
    .step-indicator {
      flex: 1;
      text-align: center;
      padding: 8px 12px;
      border-radius: 20px;
      background-color: #f3f4f6;
      color: #6b7280;
      font-weight: 500;
      transition: all 0.3s ease;
      position: relative;
      margin: 0 4px;
    }

    .step-indicator.active {
      background-color: #003324;
      color: white;
      transform: scale(1.05);
    }

    .step-indicator.completed {
      background-color: #10b981;
      color: white;
    }

    /* Progress bar for horizontal layout */
    .step-progress {
      position: absolute;
      bottom: -8px;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(90deg, #003324, #e7d48e);
      border-radius: 2px;
      transform: scaleX(0);
      transform-origin: left;
      transition: transform 0.5s ease;
    }

    .step-indicator.active .step-progress {
      transform: scaleX(1);
    }

    /* Button hover effects */
    .next-btn, .prev-btn, .submit-btn {
      transition: all 0.3s ease;
    }

    .next-btn:hover, .submit-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 51, 36, 0.3);
    }

    .prev-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }

    /* Service button animations */
    .service-btn {
      transition: all 0.3s ease;
    }

    .service-btn:hover {
      transform: translateY(-2px);
      box-shadow: 0 4px 12px rgba(231, 212, 142, 0.4);
    }

    /* Tab button animations */
    .tab-btn {
      transition: all 0.3s ease;
      border: 2px solid transparent;
      background-color: #f3f4f6;
      color: #6b7280;
    }

    .tab-btn.active {
      background-color: #003324;
      color: white;
      border-color: #003324;
    }

    .tab-btn:hover:not(.active) {
      background-color: #e7d48e;
      border-color: #003324;
      color: #003324;
    }

    /* Modal animations */
    #service-modal {
      animation: modalFadeIn 0.3s ease-out;
    }

    @keyframes modalFadeIn {
      from {
        opacity: 0;
        transform: scale(0.9);
      }
      to {
        opacity: 1;
        transform: scale(1);
      }
    }

    /* Form input animations */
    .field-input {
      transition: all 0.3s ease;
      border: 2px solid #e5e7eb;
    }

    .field-input:focus {
      border-color: #003324;
      box-shadow: 0 0 0 3px rgba(0, 51, 36, 0.1);
      transform: translateY(-1px);
    }
  </style>
  <h2 class="text-3xl font-bold mb-8 text-center text-[#003324] font-lora">Booking Services Step by Step</h2>
  <div id="booking-steps" class="w-full relative overflow-hidden" style="min-height: 600px;">
    <!-- Stepper UI -->
    <div class="flex justify-between mb-8 relative z-20 px-4">
      <div class="step-indicator step-1 active">
        1. Select Service
        <div class="step-progress"></div>
      </div>
      <div class="step-indicator step-2">
        2. Date & Time
        <div class="step-progress"></div>
      </div>
      <div class="step-indicator step-3">
        3. Personal Info
        <div class="step-progress"></div>
      </div>
      <div class="step-indicator step-4">
        4. Confirm
        <div class="step-progress"></div>
      </div>
    </div>

    <!-- Steps Container with Horizontal Sliding -->
    <div class="steps-container" id="steps-container">
      <!-- Step 1: Select Service -->
      <div class="step step-1">
      <div class="category-tabs flex gap-4 mb-4">
        <button class="tab-btn active px-4 py-2 rounded-lg font-bold" data-tab="pmu">PMU</button>
        <button class="tab-btn px-4 py-2 rounded-lg font-bold" data-tab="skincare">Skincare</button>
        <button class="tab-btn px-4 py-2 rounded-lg font-bold" data-tab="detox">Detox & Herbal Hair Wash</button>
      </div>
      <div class="services-groups">
        <!-- PMU Group -->
        <div class="service-group" data-group="pmu">
          <div class="font-semibold mb-2">Brows</div>
          <div class="service-list flex gap-2 flex-wrap">
            <button class="service-btn px-3 py-2 bg-[#e7d48e] rounded" data-service="pmu1" data-options='["Classic","Ombre"]'>Shading Ombré ($100)</button>
            <button class="service-btn px-3 py-2 bg-[#e7d48e] rounded" data-service="pmu2" data-options='["Micro","Nano"]'>Micro Blading ($120)</button>
            <button class="service-btn px-3 py-2 bg-[#e7d48e] rounded" data-service="pmu3" data-options='["Natural","Bold"]'>Combo Brows ($150)</button>
          </div>
          <div class="font-semibold mb-2 mt-4">Lips</div>
          <div class="service-list flex gap-2 flex-wrap">
            <button class="service-btn px-3 py-2 bg-[#e7d48e] rounded" data-service="pmu4" data-options='["Soft","Bold"]'>Lip Blush ($90)</button>
          </div>
        </div>
        <!-- Skincare Group -->
        <div class="service-group" data-group="skincare" style="display:none;">
          <div class="font-semibold mb-2">Facial Treatments</div>
          <div class="service-list flex gap-2 flex-wrap">
            <button class="service-btn px-3 py-2 bg-[#e7d48e] rounded" data-service="skin1" data-options='["Basic","Acne"]'>Acne Treatment ($80)</button>
            <button class="service-btn px-3 py-2 bg-[#e7d48e] rounded" data-service="skin2" data-options='["Hydrating","Brightening"]'>Hydra Facial ($120)</button>
            <button class="service-btn px-3 py-2 bg-[#e7d48e] rounded" data-service="skin3" data-options='["Chemical","Natural"]'>Chemical Peel ($100)</button>
          </div>
        </div>
        <!-- Detox Group -->
        <div class="service-group" data-group="detox" style="display:none;">
          <div class="font-semibold mb-2">Hair Treatments</div>
          <div class="service-list flex gap-2 flex-wrap">
            <button class="service-btn px-3 py-2 bg-[#e7d48e] rounded" data-service="detox1" data-options='["Herbal","Premium"]'>Herbal Hair Wash ($60)</button>
            <button class="service-btn px-3 py-2 bg-[#e7d48e] rounded" data-service="detox2" data-options='["Deep Clean","Scalp Massage"]'>Scalp Detox ($80)</button>
          </div>
        </div>
      </div>
      <button class="next-btn px-6 py-2 bg-[#003324] text-white rounded-lg font-bold mt-4">Next</button>
      <!-- Modal chọn option -->
      <div id="service-modal" class="fixed inset-0 bg-black bg-opacity-40 flex items-center justify-center z-50" style="display:none;">
        <div class="bg-white rounded-xl p-6 min-w-[320px]">
          <div class="font-bold mb-2" id="modal-service-name"></div>
          <form id="modal-options-form">
            <!-- radio options sẽ render ở đây -->
          </form>
          <div class="flex gap-2 mt-4">
            <button type="button" class="close-modal px-4 py-2 bg-gray-200 rounded">Đóng</button>
            <button type="button" class="select-option px-4 py-2 bg-[#003324] text-white rounded">Chọn</button>
          </div>
        </div>
      </div>
    </div>
    <!-- Step 2: Select Date Time -->
    <div class="step step-2">
      <label class="block mb-2 font-semibold">Select Date</label>
      <input type="text" class="field-input mb-4" id="date" placeholder="Pick a date" />
      <label class="block mb-2 font-semibold">Select Time</label>
      <input type="time" class="field-input mb-4" id="time" />
      <button class="prev-btn px-4 py-2 bg-gray-200 text-[#003324] rounded-lg font-bold mr-2">Back</button>
      <button class="next-btn px-6 py-2 bg-[#003324] text-white rounded-lg font-bold">Next</button>
    </div>
    <!-- Step 3: Personal Info -->
    <div class="step step-3">
      <label class="block mb-2 font-semibold">Full Name</label>
      <input type="text" class="field-input mb-4" id="name" placeholder="Your Name" />
      <label class="block mb-2 font-semibold">Phone</label>
      <input type="text" class="field-input mb-4" id="phone" placeholder="Phone Number" />
      <label class="block mb-2 font-semibold">Email</label>
      <input type="email" class="field-input mb-4" id="email" placeholder="Email" />
      <button class="prev-btn px-4 py-2 bg-gray-200 text-[#003324] rounded-lg font-bold mr-2">Back</button>
      <button class="next-btn px-6 py-2 bg-[#003324] text-white rounded-lg font-bold">Next</button>
    </div>
    <!-- Step 4: Confirm -->
    <div class="step step-4">
      <h3 class="text-xl font-bold mb-4">Confirm Booking</h3>
      <div class="mb-4" id="confirm-info">
        <!-- Thông tin booking sẽ được render ở đây -->
      </div>
      <button class="prev-btn px-4 py-2 bg-gray-200 text-[#003324] rounded-lg font-bold mr-2">Back</button>
      <button class="submit-btn px-6 py-2 bg-[#e7d48e] text-[#003324] rounded-lg font-bold">Confirm & Book</button>
      </div>
    </div>
    <div id="booking-status" class="mt-6 text-center font-semibold"></div>
  </div>
<script>
// Global variables for booking system
let currentStep = 1;
let selectedCategory = '';
let selectedService = '';
let selectedOption = '';

document.addEventListener('DOMContentLoaded', function () {
  console.log('DOM Content Loaded - Booking System Initializing');

  function showStep(n, direction = 'next') {
    const container = document.getElementById('steps-container');
    const indicators = document.querySelectorAll('.step-indicator');

    // Add transition state
    if (container) {
      container.parentElement?.classList.add('step-transitioning');
    }

    // Update step indicators
    indicators.forEach((indicator, index) => {
      const stepNumber = index + 1;
      indicator.classList.remove('active', 'completed');

      if (stepNumber < n) {
        indicator.classList.add('completed');
      } else if (stepNumber === n) {
        indicator.classList.add('active');
      }
    });

    // Slide to the correct step (0%, -25%, -50%, -75%)
    const translateX = -(n - 1) * 25;
    if (container) {
      container.style.transform = `translateX(${translateX}%)`;
    }

    currentStep = n;

    // Remove transition state after animation completes
    setTimeout(() => {
      if (container) {
        container.parentElement?.classList.remove('step-transitioning');
      }
    }, 500);
  }

  function validateStep(step) {
    console.log('Validating step:', step);

    if (step === 1) {
      console.log('Step 1 validation - Category:', selectedCategory, 'Service:', selectedService, 'Option:', selectedOption);
      if (!selectedCategory || !selectedService || !selectedOption) {
        alert('Vui lòng chọn đầy đủ dịch vụ và option!');
        return false;
      }
    }
    if (step === 2) {
      const dateEl = document.getElementById('date');
      const timeEl = document.getElementById('time');
      const date = dateEl ? dateEl.value.trim() : '';
      const time = timeEl ? timeEl.value.trim() : '';
      console.log('Step 2 validation - Date:', date, 'Time:', time);
      if (!date || !time) {
        alert('Vui lòng chọn ngày và giờ!');
        return false;
      }
    }
    if (step === 3) {
      const nameEl = document.getElementById('name');
      const phoneEl = document.getElementById('phone');
      const emailEl = document.getElementById('email');
      const name = nameEl ? nameEl.value.trim() : '';
      const phone = phoneEl ? phoneEl.value.trim() : '';
      const email = emailEl ? emailEl.value.trim() : '';
      console.log('Step 3 validation - Name:', name, 'Phone:', phone, 'Email:', email);
      if (!name || !phone || !email) {
        alert('Vui lòng nhập đầy đủ thông tin cá nhân!');
        return false;
      }
    }
    console.log('Step', step, 'validation passed');
    return true;
  }

  function updateConfirmInfo() {
    console.log('Updating confirm info with data:', {
      selectedCategory,
      selectedService,
      selectedOption,
      date: document.getElementById('date')?.value,
      time: document.getElementById('time')?.value,
      name: document.getElementById('name')?.value,
      phone: document.getElementById('phone')?.value,
      email: document.getElementById('email')?.value
    });

    const confirmInfo = document.getElementById('confirm-info');
    if (confirmInfo) {
      confirmInfo.innerHTML = `
        <div class="bg-gray-50 p-4 rounded-lg">
          <h4 class="font-bold mb-2">Booking Summary:</h4>
          <p><strong>Service:</strong> ${selectedCategory} - ${selectedService} (${selectedOption})</p>
          <p><strong>Date:</strong> ${document.getElementById('date')?.value || 'Not selected'}</p>
          <p><strong>Time:</strong> ${document.getElementById('time')?.value || 'Not selected'}</p>
          <p><strong>Name:</strong> ${document.getElementById('name')?.value || 'Not provided'}</p>
          <p><strong>Phone:</strong> ${document.getElementById('phone')?.value || 'Not provided'}</p>
          <p><strong>Email:</strong> ${document.getElementById('email')?.value || 'Not provided'}</p>
        </div>
      `;
    }
  }
  console.log('DOM Content Loaded - Booking System Initializing');

  const steps = Array.from(document.querySelectorAll('.step'));
  const indicators = Array.from(document.querySelectorAll('.step-indicator'));

  console.log('Steps found:', steps.length);
  console.log('Indicators found:', indicators.length);

  // Tabs logic
  const tabBtns = document.querySelectorAll('.tab-btn');
  const serviceGroups = document.querySelectorAll('.service-group');

  console.log('Found tab buttons:', tabBtns.length);
  console.log('Found service groups:', serviceGroups.length);

  tabBtns.forEach((btn, index) => {
    console.log('Tab button', index, ':', btn.dataset.tab);
    btn.addEventListener('click', () => {
      console.log('Tab clicked:', btn.dataset.tab);
      tabBtns.forEach(b => b.classList.remove('active'));
      btn.classList.add('active');
      selectedCategory = btn.dataset.tab;
      console.log('Selected category:', selectedCategory);
      serviceGroups.forEach(g => {
        const shouldShow = g.dataset.group === selectedCategory;
        g.style.display = shouldShow ? 'block' : 'none';
        console.log('Service group', g.dataset.group, 'display:', shouldShow ? 'block' : 'none');
      });
    });
  });

  // Initialize first tab
  if (tabBtns.length > 0) {
    const firstTab = tabBtns[0];
    firstTab.classList.add('active');
    selectedCategory = firstTab.dataset.tab;
    serviceGroups.forEach(g => {
      g.style.display = g.dataset.group === selectedCategory ? 'block' : 'none';
    });
  }

  // Service modal logic
  const serviceButtons = document.querySelectorAll('.service-btn');
  console.log('Found service buttons:', serviceButtons.length);

  serviceButtons.forEach((btn, index) => {
    console.log('Service button', index, ':', btn.dataset.service, btn.textContent);
    btn.addEventListener('click', () => {
      console.log('Service button clicked:', btn.dataset.service);
      selectedService = btn.dataset.service;
      const options = (() => {
        try { return JSON.parse(btn.dataset.options || '[]'); } catch (e) { return []; }
      })();
      console.log('Service options:', options);
      const modalNameEl = document.getElementById('modal-service-name');
      const form = document.getElementById('modal-options-form');
      if (modalNameEl) modalNameEl.textContent = btn.textContent;
      if (form) form.innerHTML = options.map(opt => `<label class='block mb-2'><input type='radio' name='service-option' value='${opt}'> ${opt}</label>`).join('');
      const modal = document.getElementById('service-modal');
      if (modal) modal.style.display = 'flex';
    });
  });

  const closeModalBtn = document.querySelector('.close-modal');
  if (closeModalBtn) closeModalBtn.addEventListener('click', () => {
    const modal = document.getElementById('service-modal');
    if (modal) modal.style.display = 'none';
  });

  const selectOptionBtn = document.querySelector('.select-option');
  if (selectOptionBtn) selectOptionBtn.addEventListener('click', () => {
    const checked = document.querySelector('input[name="service-option"]:checked');
    if (checked) {
      selectedOption = checked.value;
      const modal = document.getElementById('service-modal');
      if (modal) modal.style.display = 'none';
    } else {
      alert('Vui lòng chọn option!');
    }
  });

  function validateStep(step) {
    console.log('Validating step:', step);

    if (step === 1) {
      console.log('Step 1 validation - Category:', selectedCategory, 'Service:', selectedService, 'Option:', selectedOption);
      if (!selectedCategory || !selectedService || !selectedOption) {
        alert('Vui lòng chọn đầy đủ dịch vụ và option!');
        return false;
      }
    }
    if (step === 2) {
      const dateEl = document.getElementById('date');
      const timeEl = document.getElementById('time');
      const date = dateEl ? dateEl.value.trim() : '';
      const time = timeEl ? timeEl.value.trim() : '';
      console.log('Step 2 validation - Date:', date, 'Time:', time);
      if (!date || !time) {
        alert('Vui lòng chọn ngày và giờ!');
        return false;
      }
    }
    if (step === 3) {
      const nameEl = document.getElementById('name');
      const phoneEl = document.getElementById('phone');
      const emailEl = document.getElementById('email');
      const name = nameEl ? nameEl.value.trim() : '';
      const phone = phoneEl ? phoneEl.value.trim() : '';
      const email = emailEl ? emailEl.value.trim() : '';
      console.log('Step 3 validation - Name:', name, 'Phone:', phone, 'Email:', email);
      if (!name || !phone || !email) {
        alert('Vui lòng nhập đầy đủ thông tin cá nhân!');
        return false;
      }
    }
    console.log('Step', step, 'validation passed');
    return true;
  }

  function updateConfirmInfo() {
    console.log('Updating confirm info with data:', {
      selectedCategory,
      selectedService,
      selectedOption,
      date: document.getElementById('date')?.value,
      time: document.getElementById('time')?.value,
      name: document.getElementById('name')?.value,
      phone: document.getElementById('phone')?.value,
      email: document.getElementById('email')?.value
    });

    const confirmInfo = document.getElementById('confirm-info');
    if (confirmInfo) {
      confirmInfo.innerHTML = `
        <div class="bg-gray-50 p-4 rounded-lg">
          <h4 class="font-bold mb-2">Booking Summary:</h4>
          <p><strong>Service:</strong> ${selectedCategory} - ${selectedService} (${selectedOption})</p>
          <p><strong>Date:</strong> ${document.getElementById('date')?.value || 'Not selected'}</p>
          <p><strong>Time:</strong> ${document.getElementById('time')?.value || 'Not selected'}</p>
          <p><strong>Name:</strong> ${document.getElementById('name')?.value || 'Not provided'}</p>
          <p><strong>Phone:</strong> ${document.getElementById('phone')?.value || 'Not provided'}</p>
          <p><strong>Email:</strong> ${document.getElementById('email')?.value || 'Not provided'}</p>
        </div>
      `;
    }
  }
      phone: document.getElementById('phone')?.value,
      email: document.getElementById('email')?.value
    });

    const confirmInfo = document.getElementById('confirm-info');
    if (confirmInfo) {
      confirmInfo.innerHTML = `
        <div class="bg-gray-50 p-4 rounded-lg">
          <h4 class="font-bold mb-2">Booking Summary:</h4>
          <p><strong>Service:</strong> ${selectedCategory} - ${selectedService} (${selectedOption})</p>
          <p><strong>Date:</strong> ${document.getElementById('date')?.value || 'Not selected'}</p>
          <p><strong>Time:</strong> ${document.getElementById('time')?.value || 'Not selected'}</p>
          <p><strong>Name:</strong> ${document.getElementById('name')?.value || 'Not provided'}</p>
          <p><strong>Phone:</strong> ${document.getElementById('phone')?.value || 'Not provided'}</p>
          <p><strong>Email:</strong> ${document.getElementById('email')?.value || 'Not provided'}</p>
        </div>
      `;
    }
  }

  // Step navigation
  showStep(1); // Initialize first step

  document.querySelectorAll('.next-btn').forEach(btn => btn.addEventListener('click', () => {
    console.log('Next button clicked, current step:', currentStep);

    if (currentStep < 4) {
      if (validateStep(currentStep)) {
        console.log('Moving to step:', currentStep + 1);
        showStep(currentStep + 1, 'next');

        // Update confirm info when reaching step 4
        if (currentStep + 1 === 4) {
          console.log('Updating confirm info...');
          updateConfirmInfo();
        }
      } else {
        console.log('Validation failed for step:', currentStep);
      }
    }
  }));

  document.querySelectorAll('.prev-btn').forEach(btn => btn.addEventListener('click', () => {
    if (currentStep > 1) showStep(currentStep - 1, 'back');
  }));

  // Submit booking
  const submitBtn = document.querySelector('.submit-btn');
  console.log('Submit button found:', submitBtn);

  if (submitBtn) {
    submitBtn.addEventListener('click', async () => {
      console.log('Submit button clicked!');
      console.log('Current step:', currentStep);
      console.log('Selected data:', { selectedCategory, selectedService, selectedOption });

      if (!validateStep(3)) {
        console.log('Validation failed for step 3');
        return;
      }

      console.log('Validation passed, proceeding with submission...');

    // Thu thập dữ liệu booking
    const bookingData = {
      category: selectedCategory,
      service: selectedService,
      option: selectedOption,
      date: document.getElementById('date')?.value || '',
      time: document.getElementById('time')?.value || '',
      name: document.getElementById('name')?.value || '',
      phone: document.getElementById('phone')?.value || '',
      email: document.getElementById('email')?.value || '',
      notes: 'Submitted via website booking system'
    };

    // Disable button và show loading
    submitBtn.disabled = true;
    submitBtn.textContent = 'Submitting...';

    try {
      console.log('Making API request to submitBooking...');
      console.log('Booking data:', bookingData);

      const response = await fetch('/.netlify/functions/submitBooking', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(bookingData)
      });

      console.log('API response status:', response.status);
      const result = await response.json();
      console.log('API response data:', result);

      if (result.success) {
        // Show success message
        const statusEl = document.getElementById('booking-status');
        if (statusEl) {
          statusEl.innerHTML = `
            <div class="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
              <strong>Success!</strong> Your booking has been submitted successfully.
              ${result.sheetUpdated ? 'Data saved to our records.' : ''}
              We'll contact you within 24 hours to confirm.
            </div>
          `;
        }

        // Reset form và quay về step 1
        setTimeout(() => {
          selectedCategory = '';
          selectedService = '';
          selectedOption = '';
          showStep(1);
          if (statusEl) statusEl.innerHTML = '';
        }, 3000);

      } else {
        throw new Error(result.error || 'Submission failed');
      }

    } catch (error) {
      console.error('Submit error:', error);
      const statusEl = document.getElementById('booking-status');
      if (statusEl) {
        statusEl.innerHTML = `
          <div class="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded">
            <strong>Error!</strong> Failed to submit booking. Please try again or contact us directly.
          </div>
        `;
      }
    } finally {
      // Re-enable button
      submitBtn.disabled = false;
      submitBtn.textContent = 'Confirm & Book';
    }
  });

});
</script>