---

import UseCaseCard from '../cards/UseCaseCard.astro';
import Button from '../shared/Button.astro';
import reviewsData from '../../../data/reviews.json';

const useCases = reviewsData.reviews;

// Khai báo biến toàn cục cho slider
let sliderRef: HTMLDivElement | null = null;
let isDragging = false;
let startX: number;
let scrollLeft: number;
let expandedIndex = -1;
let isPaused = false;

// Các hàm xử lý sự kiện
function handleMouseEnter(idx: number) {
  expandedIndex = idx;
  isPaused = true;
}
function handleMouseLeave() {
  expandedIndex = -1;
  isPaused = false;
}
function handleClick(idx: number) {
  expandedIndex = idx;
  isPaused = true;
}
---

<style>
.usecase-slider {
  width: 100vw;
  max-width: 100vw;
  margin-left: 0;
  margin-right: 0;
  overflow-x: auto; /* Cho phép scroll ngang */
  overflow-y: visible;
  position: relative;
  touch-action: pan-x pan-y; /* allow both horizontal and vertical pan */
  -webkit-overflow-scrolling: touch;
  scrollbar-width: none; /* Firefox */
  -ms-overflow-style: none; /* IE and Edge */
  padding-bottom: 2px;
}
.usecase-slider::-webkit-scrollbar {
  display: none; /* Chrome, Safari, Opera */
}
.usecase-track {
  display: flex;
  gap: 2rem;
  padding-bottom: 2px;
  min-width: max-content;
  animation: scroll-left 480s linear infinite; /* tốc độ chậm hơn nữa */
}
.usecase-slider[data-paused="true"] .usecase-track {
  animation-play-state: paused;
}
@keyframes scroll-left {
  0% { transform: translateX(0); }
  100% { transform: translateX(-50%); }
}

@keyframes scroll-right {
  0% { transform: translateX(-50%); }
  100% { transform: translateX(0); }
}
.usecase-track.reverse {
  animation: scroll-right 480s linear infinite;
}
.usecase-card {
  min-width: 320px;
  max-width: 320px;
  transition: all 0.3s cubic-bezier(.4,2,.3,1);
  cursor: pointer;
  z-index: 1;
}
.usecase-card.expanded {
  max-width: 600px;
  min-width: 600px;
  z-index: 10;
  box-shadow: 0 8px 32px 0 rgba(0,0,0,0.2);
}

/* constrain heading width */
section .text-4xl.font-bold {
  max-width: 1180px;
  margin-left: auto;
  margin-right: auto;
}
</style>

<section class="px-0 pt-[50px] pb-[34px] bg-primary" style="">
  <h2 class="text-4xl md:text-5xl font-bold text-center mb-8 font-lora" style="color: var(--color-black2white); font-family: 'Lora', serif; line-height: calc(1.2em + 3px);">
    {({
      en: "And thousands of other clients have trusted and experienced our services!",
      vi: "Hàng ngàn khách hàng đã tin tưởng và trải nghiệm dịch vụ của chúng tôi!",
      ja: "何千人ものお客様が私たちのサービスを信頼し、体験されています！",
      ko: "수천 명의 고객이 저희 서비스를 신뢰하고 경험했습니다!",
      es: "¡Miles de clientes han confiado y experimentado nuestros servicios!"
    })[(Astro.props?.lang || Astro.url.pathname.split('/')[1] || 'en') as 'en' | 'vi' | 'ja' | 'ko' | 'es']}
  </h2>
  <p class="text-base text-center mb-8 max-w-2xl mx-auto font-lora" style="color: var(--color-blacktext2); font-family: 'Lora', serif;">
    {({
      en: "Honest reviews from those who have experienced our premium services.",
      vi: "Những đánh giá chân thực từ khách hàng đã trải nghiệm dịch vụ cao cấp của chúng tôi.",
      ja: "私たちのプレミアムサービスを体験されたお客様からの正直なレビュー。",
      ko: "프리미엄 서비스를 경험한 고객들의 솔직한 리뷰입니다.",
      es: "Reseñas honestas de quienes han experimentado nuestros servicios premium."
    })[(Astro.props?.lang || Astro.url.pathname.split('/')[1] || 'en') as 'en' | 'vi' | 'ja' | 'ko' | 'es']}
  </p>
  <div class="relative overflow-x-hidden">
    <div>
      <div class="usecase-slider"
         style="touch-action: pan-x pan-y; background: var(--color-section-card-bg);"
          data-paused={isPaused ? "true" : "false"}
          id="usecase-slider"
          onmouseenter="this.setAttribute('data-paused','true')"
          onmouseleave="this.setAttribute('data-paused','false')"
      >
        <div class="usecase-track mt-[30px] mb-[30px]">
          {useCases.slice(0, 10).concat(useCases.slice(0, 10)).map((review: any, idx: number) => {
            // Map review data to UseCaseCard props (Reviews 1-10)
            const mapped = {
              name: review.name || 'Anonymous',
              category: 'Customer Review',
              industry: 'Beauty & Wellness',
              teamSize: 0,
              months: 0,
              description: review.content || '',
              techs: [],
              image: review.image,
            };
            return <UseCaseCard uc={mapped} expanded={expandedIndex === idx} avatarIndex={idx} />;
          })}
        </div>
        <div class="usecase-track mt-[30px] mb-[30px] reverse">
          {useCases.slice(10, 20).concat(useCases.slice(10, 20)).map((review: any, idx: number) => {
            // Map review data to UseCaseCard props (Reviews 11-20)
            const mapped = {
              name: review.name || 'Anonymous',
              category: 'Customer Review',
              industry: 'Beauty & Wellness',
              teamSize: 0,
              months: 0,
              description: review.content || '',
              techs: [],
              image: review.image,
            };
            return <UseCaseCard uc={mapped} expanded={expandedIndex === idx} avatarIndex={idx} />;
          })}
        </div>
      </div>
    </div>
  </div>


    <script is:inline>
      if (typeof window !== 'undefined') {
        window.addEventListener('DOMContentLoaded', () => {
          const slider = document.getElementById('usecase-slider');
          if (!slider) return;
          let isDragging = false;
          let startX = 0;
          let scrollLeft = 0;

          // Mouse drag
          slider.addEventListener('pointerdown', function(e) {
            isDragging = true;
            startX = e.pageX - slider.offsetLeft;
            scrollLeft = slider.scrollLeft;
          });
          window.addEventListener('pointerup', function() {
            isDragging = false;
          });
          slider.addEventListener('pointerleave', function() {
            isDragging = false;
          });
          slider.addEventListener('pointermove', function(e) {
            if (!isDragging) return;
            e.preventDefault();
            const x = e.pageX - slider.offsetLeft;
            const walk = (x - startX) * 2;
            slider.scrollLeft = scrollLeft - walk;
          });

          // Touch swipe
          let touchStartX = 0;
          let touchScrollLeft = 0;
          slider.addEventListener('touchstart', function(e) {
            if (e.touches.length !== 1) return;
            isDragging = true;
            touchStartX = e.touches[0].pageX - slider.offsetLeft;
            touchScrollLeft = slider.scrollLeft;
          });
          slider.addEventListener('touchend', function() {
            isDragging = false;
          });
          slider.addEventListener('touchmove', function(e) {
            if (!isDragging || e.touches.length !== 1) return;
            const x = e.touches[0].pageX - slider.offsetLeft;
            const walk = (x - touchStartX) * 2;
            slider.scrollLeft = touchScrollLeft - walk;
          });
        });
      }
    </script>
</section>