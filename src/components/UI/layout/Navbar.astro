---
import Dropdown from '../layout/Dropdown.astro';
import { menus } from '../../../content/menu.ts';
import type { MenuItem } from '../../../content/menu.ts';
import MobileDropdown from '../layout/MobileDropdown.astro';
import { getServiceMenu } from '../../../content/menu.ts';

export interface Props {
  class?: string;
}

const { class: customClass = '' } = Astro.props;

// Detect current language from URL
const currentLang = Astro.url.pathname.split('/')[1] || 'en';

let menuItems: MenuItem[] = menus[currentLang] || menus['en'];

// Inject dynamic SERVICES children from getServiceMenu
const serviceMenuIdx = menuItems.findIndex(
  item =>
    item.label?.toLowerCase().includes('service') ||
    item.label?.toLowerCase().includes('dịch vụ') ||
    item.label?.toLowerCase().includes('サービス')
);
if (serviceMenuIdx !== -1) {
  menuItems = [...menuItems];
  menuItems[serviceMenuIdx] = {
    ...menuItems[serviceMenuIdx],
    children: await getServiceMenu(currentLang),
  };
}

// XÓA: langMap, currentLangDisplay, dropdown ngôn ngữ, TopBar Section
// ...keep translations and the rest if bạn đang dùng cho mobile/desktop menu...
---
<!-- XÓA NGUYÊN KHỐI TopBar Section Ở ĐÂY -->

<!-- Navbar Section -->
<nav
  id="main-navbar"
  class="transition-colors duration-200 backdrop-blur-md pb-0 md:pb-[10px]"
  style="background: rgba(0,51,36,0.50);"
>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
  <div class="flex flex-row items-center justify-between md:flex-col md:items-center md:justify-center">
    <!-- Logo/Brand Centered -->
    <div id="logo-wrapper" class="w-auto flex-shrink-0 flex justify-center py-1 transition-all duration-300 md:w-full md:justify-center">
      <a href={currentLang === 'en' ? '/' : `/${currentLang}`} class="flex items-center">
  <img id="navbar-logo" src="/logo.webp" alt="ARIS VIETNAM" class="w-[122px] md:w-[240px] transition-transform duration-300" style="height: auto; color: var(--color-blue2white); transform: scale(1);" />
      </a>
    </div>
    <!-- Desktop Navigation -->
  <div class="hidden md:flex w-full justify-center" style="position: static;">
      <div class="flex items-center space-x-1 font-lora font-bold" style="font-size:20px;">
          {menuItems.map((item: MenuItem) =>
            item.children && item.children.length > 0 ? (
              <Dropdown label={item.label} items={item.children} />
            ) : (
              <a href={item.href} class="text-gray-900 dark:text-gray-100 hover:text-blue-600 dark:hover:text-blue-400 px-3 py-2 rounded-md text-sm font-medium transition-colors flex items-center justify-center font-lora font-bold" style="font-size:16px;">
                <span class="whitespace-nowrap font-lora font-bold" style="color: var(--color-black2white); font-family: 'Lora', serif;">{item.label}</span>
              </a>
            )
          )}
        </div>
      </div>

            <!-- Mobile Menu Button -->
      <div class="md:hidden">
        <button
          id="mobile-menu-button"
          class="inline-flex items-center justify-center p-2 rounded-md transition-colors hover:bg-black/10 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500 dark:focus:ring-blue-400"
          style="color: var(--color-black2white);"
        >
          <svg class="h-8 w-8 block" fill="none" viewBox="0 0 24 24" stroke="currentColor" id="menu-icon">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
          <svg class="h-8 w-8 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor" id="close-icon">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>
  </div>

  <!-- Mobile Navigation (mirror desktop menu) -->
  <div 
    id="mobile-menu" 
    class="md:hidden hidden" 
    style="background: var(--color-navbar);"
  >
    <div class="px-4 pt-2 pb-3 space-y-2">
       {menuItems.map(item => (
         item.children && item.children.length > 0 ? (
           <MobileDropdown
             label={item.label}
             items={item.children.map(child => ({ href: child.href, title: child.label }))}
           />
         ) : (
          <a
            href={item.href}
            class="block px-3 py-2 rounded-md text-sm font-medium font-lora font-bold transition-colors"
            style="font-size:16px; color: var(--color-black2white);"
          >
            {item.label}
          </a>
         )
       ))}
     </div>
   </div>
</nav>

<!-- Material Icons CDN -->
<link href="https://fonts.googleapis.com/icon?family=Material+Icons+Outlined" rel="stylesheet">

<!-- REPLACE to only keep theme + mobile menu (XÓA code dropdown ngôn ngữ) -->
<script>
  // Apply theme immediately to prevent flash
  (function () {
    if (typeof window !== 'undefined') {
      const theme = localStorage.getItem('theme');
      if (theme === 'dark' || (!theme && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
        document.documentElement.classList.add('dark');
      }
    }
  })();

  document.addEventListener('DOMContentLoaded', function () {
    // Mobile menu toggle
    const menuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuIcon = document.getElementById('menu-icon');
    const closeIcon = document.getElementById('close-icon');

    if (menuButton && mobileMenu && menuIcon && closeIcon) {
      menuButton.addEventListener('click', function () {
        mobileMenu.classList.toggle('hidden');
        menuIcon.classList.toggle('hidden');
        menuIcon.classList.toggle('block');
        closeIcon.classList.toggle('hidden');
        closeIcon.classList.toggle('block');
      });
    }

    // Dark mode
    const toggleBtn = document.getElementById('toggle-dark');
    const sunIcon = document.getElementById('sun-icon');
    const moonIcon = document.getElementById('moon-icon');

    function updateIcons(isDark) {
      if (isDark) {
        sunIcon?.classList.add('hidden');
        moonIcon?.classList.remove('hidden');
      } else {
        sunIcon?.classList.remove('hidden');
        moonIcon?.classList.add('hidden');
      }
    }

    function toggleTheme() {
      const html = document.documentElement;
      const isDark = html.classList.contains('dark');
      if (isDark) {
        html.classList.remove('dark');
        localStorage.setItem('theme', 'light');
        updateIcons(false);
      } else {
        html.classList.add('dark');
        localStorage.setItem('theme', 'dark');
        updateIcons(true);
      }
    }

    const theme = localStorage.getItem('theme');
    let isDarkMode;
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
      isDarkMode = true;
    } else if (theme === 'light') {
      document.documentElement.classList.remove('dark');
      isDarkMode = false;
    } else {
      isDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
      if (isDarkMode) document.documentElement.classList.add('dark');
    }
    updateIcons(isDarkMode);

    toggleBtn?.addEventListener('click', toggleTheme);
  });
</script>

<style>
@media (prefers-color-scheme: dark) {
  :root {
    --color-navbar-bg: rgba(31,41,55,0.8);
    --color-navbar-border: rgba(55,65,81,0.3);
  }
}
header, nav, main, section, body {
  overflow: visible !important;
}
</style>
