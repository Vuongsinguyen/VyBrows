---
import Dropdown from '../layout/Dropdown.astro';
import { menus } from '../../../content/menu.ts';
import type { MenuItem } from '../../../content/menu.ts';
import MobileDropdown from '../layout/MobileDropdown.astro';
import { getServiceMenu } from '../../../content/menu.ts';

export interface Props {
  class?: string;
  currentLang?: 'vi' | 'en' | 'es' | 'ja' | 'ko';
  labels?: {
    home: string; services: string; about: string; projects: string;
    news: string; recruitment: string; contact: string;
  };
}

const { class: customClass = '', currentLang: langProp = 'en', labels } = Astro.props;

// Robust lang resolve: prefer prop, else URL, else 'en'
const urlLang = (Astro.url.pathname.split('/')[1] || '') as Props['currentLang'];
const supported = ['vi','en','es','ja','ko'] as const;
const currentLang = (supported as readonly string[]).includes(langProp) ? langProp
  : (supported as readonly string[]).includes(urlLang) ? urlLang
  : 'en';

// Base prefix by lang
const basePrefix = currentLang === 'en' ? '' : `/${currentLang}`;

// Translations for small labels (fallback to computed set)
const t = labels ?? ({
  vi: { home: 'Trang chủ', services: 'Dịch vụ', about: 'Về chúng tôi', projects: 'Dự án', news: 'Tin tức', recruitment: 'Tuyển dụng', contact: 'Liên hệ' },
  ja: { home: 'ホーム', services: 'サービス', about: '私たちについて', projects: 'プロジェクト', news: 'ニュース', recruitment: '採用情報', contact: 'お問い合わせ' },
  es: { home: 'Inicio', services: 'Servicios', about: 'Sobre nosotros', projects: 'Proyectos', news: 'Noticias', recruitment: 'Reclutamiento', contact: 'Contacto' },
  en: { home: 'Home', services: 'Services', about: 'About', projects: 'Projects', news: 'News', recruitment: 'Recruitment', contact: 'Contact' },
  ko: { home: '홈', services: '서비스', about: '회사 소개', projects: '프로젝트', news: '뉴스', recruitment: '채용 정보', contact: '문의' },
} as const)[currentLang];

// Menu items by resolved lang
let menuItems: MenuItem[] = (menus[currentLang] || menus['en']).filter((item: MenuItem) => typeof item.label === 'string' && !item.label.toLowerCase().includes('communication'));

// Inject dynamic SERVICES children
const serviceMenuIdx = menuItems.findIndex(
  item =>
    item.label?.toLowerCase().includes('service') ||
    item.label?.toLowerCase().includes('servicio') || // ES
    item.label?.toLowerCase().includes('dịch vụ') ||  // VI
    item.label?.includes('サービス') ||               // JA
    item.label?.includes('서비스')                    // KO
);
if (serviceMenuIdx !== -1) {
  menuItems = [...menuItems];
  menuItems[serviceMenuIdx] = {
    ...menuItems[serviceMenuIdx],
    children: await getServiceMenu(currentLang),
  };
}

// Extra labels for mobile extras
const extra = ({
  vi: { dr: 'Dr.ANMYTAS', supply: 'DANH SÁCH VẬT TƯ', blog: 'BLOG' },
  en: { dr: 'Dr.ANMYTAS', supply: 'SUPPLY LIST', blog: 'BLOG' },
  es: { dr: 'Dr.ANMYTAS', supply: 'Lista de suministros', blog: 'Blog' },
  ja: { dr: 'Dr.ANMYTAS', supply: 'サプライリスト', blog: 'ブログ' },
  ko: { dr: 'Dr.ANMYTAS', supply: '자재 목록', blog: '블로그' },
})[currentLang];
---
<!-- ĐÃ XOÁ text thừa "Noticias" ở đầu file -->

<nav
  id="main-navbar"
  class="transition-colors duration-200 backdrop-blur-md pb-0 md:pb-[10px]"
  style="background: rgba(0,51,36,0.50);"
>
  <div class="flex flex-row items-center justify-between md:flex-col md:items-center md:justify-center px-4 sm:px-6 lg:px-8">
    <!-- Logo/Brand Centered -->
    <div id="logo-wrapper" class="w-auto flex-shrink-0 flex justify-center py-1 transition-all duration-300 md:w-full md:justify-center">
      <a href={currentLang === 'en' ? '/' : `/${currentLang}`} class="flex items-center">
  <img id="navbar-logo" src="/logo.webp" alt="ARIS VIETNAM" class="w-[122px] md:w-[240px] transition-transform duration-300" style="height: auto; color: var(--color-blue2white); transform: scale(1);" />
      </a>
    </div>
    <!-- Desktop Navigation -->
  <div class="hidden md:flex w-full justify-center" style="position: static;">
      <div class="flex items-center space-x-1 font-lora font-bold" style="font-size:20px;">
          {menuItems.map((item: MenuItem) =>
            item.children && item.children.length > 0 ? (
              <Dropdown
                label={item.label}
                items={item.children.map(child => ({
                  href: child.href,
                  title: child.label,
                  description: child.description ?? ''
                }))}
              />
            ) : (
              <a
                href={item.label.toLowerCase().includes('training') ? '#pmu-training' : item.label.toLowerCase().includes('solution') ? '#signature-services' : item.label.toLowerCase().includes('about') ? '#why-choose-us' : (item.href.startsWith('/') ? item.href : `#${item.href}`)}
                onclick={item.label.toLowerCase().includes('training') ? "event.preventDefault(); const el=document.querySelector('#pmu-training'); if(el){ window.smoothScrollTo(el.getBoundingClientRect().top+window.scrollY-80,700); }" : item.label.toLowerCase().includes('solution') ? "event.preventDefault(); const el=document.querySelector('#signature-services'); if(el){ window.smoothScrollTo(el.getBoundingClientRect().top+window.scrollY-80,700); }" : item.label.toLowerCase().includes('about') ? "event.preventDefault(); const el=document.querySelector('#why-choose-us'); if(el){ window.smoothScrollTo(el.getBoundingClientRect().top+window.scrollY-80,700); }" : (item.href.startsWith('#') ? "event.preventDefault(); const el=document.querySelector(this.getAttribute('href')); if(el){ window.smoothScrollTo(el.getBoundingClientRect().top+window.scrollY-80,700); }" : undefined)}
                class="text-gray-900 dark:text-gray-100 hover:text-blue-600 dark:hover:text-blue-400 px-3 py-2 rounded-md text-sm font-medium transition-colors flex items-center justify-center font-lora font-bold"
                style="font-size:16px;"
              >
                <span class="whitespace-nowrap font-lora font-bold" style="color: var(--color-black2white); font-family: 'Lora', serif;">{item.label}</span>
              </a>
            )
          )}
        </div>
      </div>

            <!-- Mobile Menu Button -->
      <div class="md:hidden">
        <button
          id="mobile-menu-button"
          class="inline-flex items-center justify-center p-2 rounded-md transition-colors hover:bg-black/10 focus:outline-none focus:ring-2 focus:ring-inset focus:ring-blue-500 dark:focus:ring-blue-400"
          style="color: var(--color-black2white);"
        >
          <svg class="h-8 w-8 block" fill="none" viewBox="0 0 24 24" stroke="currentColor" id="menu-icon">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />
          </svg>
          <svg class="h-8 w-8 hidden" fill="none" viewBox="0 0 24 24" stroke="currentColor" id="close-icon">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
    </div>

  <!-- Mobile Navigation -->
  <div 
    id="mobile-menu" 
    class="md:hidden hidden font-lora" 
    style="background: var(--color-navbar);"
  >
    <div class="px-4 pt-2 pb-3 space-y-2">
      {menuItems.map((item: MenuItem) =>
        item.children && item.children.length > 0 ? (
          <MobileDropdown
            label={item.label}
            items={item.children.map(child => ({
              href: child.href,
              title: child.label,
              description: child.description ?? ''
            }))}
          />
        ) : (
          <a href={item.href} class="block px-3 py-2 rounded-md text-sm font-medium font-lora font-bold transition-colors" style="font-size:16px; color: var(--color-black2white);">
            {item.label}
          </a>
        )
      )}

      <hr class="opacity-30 my-2" />

      <!-- Extras translated -->
      <a href={`${basePrefix}/dr-anmytas`} class="block px-3 py-2 rounded-md text-sm font-medium font-lora font-bold transition-colors" style="font-size:16px; color: var(--color-black2white);">{extra.dr}</a>
      <a href={`${basePrefix}/supply-list`} class="block px-3 py-2 rounded-md text-sm font-medium font-lora font-bold transition-colors" style="font-size:16px; color: var(--color-black2white);">{extra.supply}</a>
      <a href={`${basePrefix}/blog`} class="block px-3 py-2 rounded-md text-sm font-medium font-lora font-bold transition-colors" style="font-size:16px; color: var(--color-black2white);">{extra.blog}</a>
    </div>
  </div>
</nav>

<!-- Material Icons CDN -->
<link href="https://fonts.googleapis.com/icon?family=Material+Icons+Outlined" rel="stylesheet">

<!-- REPLACE to only keep theme + mobile menu (XÓA code dropdown ngôn ngữ) -->
<script>
  // Apply theme immediately to prevent flash
  (function () {
    if (typeof window !== 'undefined') {
      const theme = localStorage.getItem('theme');
      if (theme === 'dark' || (!theme && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
        document.documentElement.classList.add('dark');
      }
    }
  })();

  document.addEventListener('DOMContentLoaded', function () {
    // Mobile menu toggle
    const menuButton = document.getElementById('mobile-menu-button');
    const mobileMenu = document.getElementById('mobile-menu');
    const menuIcon = document.getElementById('menu-icon');
    const closeIcon = document.getElementById('close-icon');

    if (menuButton && mobileMenu && menuIcon && closeIcon) {
      menuButton.addEventListener('click', function () {
        mobileMenu.classList.toggle('hidden');
        menuIcon.classList.toggle('hidden');
        menuIcon.classList.toggle('block');
        closeIcon.classList.toggle('hidden');
        closeIcon.classList.toggle('block');
      });
    }

    // Dark mode
    const toggleBtn = document.getElementById('toggle-dark');
    const sunIcon = document.getElementById('sun-icon');
    const moonIcon = document.getElementById('moon-icon');

    function updateIcons(isDark) {
      if (!sunIcon || !moonIcon) return;
      if (isDark) {
        sunIcon.classList.add('hidden');
        moonIcon.classList.remove('hidden');
      } else {
        sunIcon.classList.remove('hidden');
        moonIcon.classList.add('hidden');
      }
    }

    function toggleTheme() {
      const html = document.documentElement;
      const isDark = html.classList.contains('dark');
      if (isDark) {
        html.classList.remove('dark');
        localStorage.setItem('theme', 'light');
        updateIcons(false);
      } else {
        html.classList.add('dark');
        localStorage.setItem('theme', 'dark');
        updateIcons(true);
      }
    }

    const theme = localStorage.getItem('theme');
    let isDarkMode;
    if (theme === 'dark') {
      document.documentElement.classList.add('dark');
      isDarkMode = true;
    } else if (theme === 'light') {
      document.documentElement.classList.remove('dark');
      isDarkMode = false;
    } else {
      isDarkMode = window.matchMedia('(prefers-color-scheme: dark)').matches;
      if (isDarkMode) document.documentElement.classList.add('dark');
    }
    updateIcons(isDarkMode);

    toggleBtn?.addEventListener('click', toggleTheme);
  });
</script>

<style>
@media (prefers-color-scheme: dark) {
  :root {
    --color-navbar-bg: rgba(31,41,55,0.8);
    --color-navbar-border: rgba(55,65,81,0.3);
  }
}
header, nav, main, section, body {
  overflow: visible !important;
}

/* Ensure hamburger menu uses Lora even nếu thiếu utility */
#mobile-menu { font-family: 'Lora', serif; }
</style>
