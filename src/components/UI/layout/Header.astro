---
// Header.astro - Combined TopBar and Navbar
import Navbar from './Navbar.astro';

export interface Props { class?: string; }
const { class: customClass = '' } = Astro.props;

// Language mapping + detect current language
const langMap = { vi: 'Ti·∫øng Vi·ªát', en: 'English', es: 'Espa√±ol', ja: 'Êó•Êú¨Ë™û', ko: 'ÌïúÍµ≠Ïñ¥' };
const currentLang = Astro.url.pathname.match(/^\/(vi|en|es|ja|ko)(\/|$)/)?.[1] || 'en';
const currentLangDisplay = langMap[currentLang] || langMap.en;
---
<header
  id="header-container"
  class={`fixed top-0 left-0 right-0 z-[9999] ${customClass} border-b`}
  style="border-color: #003324; z-index: 9999 !important;"
>
  <!-- Topbar Section -->
  <div id="topbar" class="text-white w-full block" style="background: var(--color-primary-gradient); display: block !important; height: 100px; overflow: visible; position: relative; z-index: 9999;">
    <div class="max-w-[1280px] mx-auto flex justify-between items-center px-6 py-0 text-sm font-medium" style="height: 100px; display: flex !important; overflow: visible; position: relative;">
      <!-- Contact Info -->
      <div class="flex items-center space-x-6">
        <a href="mailto:contact@vybrows-academy.com" class="items-center gap-1 hidden md:flex" style="color: var(--color-text); text-decoration: none;">
          <span class="material-icons-outlined text-base" style="font-size: 20px; color: var(--color-text);">mail</span>
          contact@vybrows-academy.com
        </a>
        <a href="tel:3464099999" class="items-center gap-1 hidden md:flex" style="color: var(--color-text); text-decoration: none;">
          <span class="material-icons-outlined text-base" style="font-size: 20px; color: var(--color-text);">call</span>
          VN: 346-409-9999
        </a>
        <a href="tel:+81333401053" class="items-center gap-1 hidden md:flex" style="color: var(--color-text); text-decoration: none;">
          <span class="material-icons-outlined text-base" style="font-size: 20px; color: var(--color-text);">call</span>
          JP: (+81) 3 3340-1053
        </a>
        <!-- Mobile: only icons -->
        <a href={`/${currentLang}/contact`} class="md:hidden flex items-center" aria-label="G·ª≠i email">
          <span class="material-icons-outlined text-white text-base" style="font-size: 20px;">mail</span>
        </a>
        <a href="tel:+832838424483" class="md:hidden flex items-center" aria-label="G·ªçi ƒëi·ªán tho·∫°i">
          <span class="material-icons-outlined text-white text-base" style="font-size: 20px;">call</span>
        </a>
      </div>

      <!-- Right controls -->
      <div class="flex items-center gap-4" style="position: static; overflow: visible;">
        <a href="/dr-anmytas" class="hover:underline text-sm font-medium" style="color: var(--color-text);">Dr.ANMYTAS</a>
        <a href="/supply-list" class="hover:underline text-sm font-medium" style="color: var(--color-text);">SUPPLY LIST</a>
        <a href="/blog" class="hover:underline text-sm font-medium" style="color: var(--color-text);">BLOG</a>

        <!-- Language Dropdown -->
        <div class="language-dropdown-container" style="position: relative; z-index: 10000 !important;" role="menu" aria-label="Language Switcher">
          <button id="lang-dropdown-btn" class="flex items-center gap-1 px-3 py-2 rounded border border-gray-300 hover:bg-white/10 transition-all cursor-pointer" type="button" aria-haspopup="true" aria-expanded="false" style="color: var(--color-text); border-color: var(--color-text); position: relative; z-index: 10001 !important;" onclick="console.log('üî• DIRECT CLICK WORKS!'); const menu = document.getElementById('lang-dropdown-menu'); menu.style.display = menu.style.display === 'block' ? 'none' : 'block';">
            <span>{currentLangDisplay}</span>
            <svg class="w-4 h-4" fill="var(--color-text)" viewBox="0 0 24 24"><path d="M7 9.5L12 14.5L17 9.5H7Z"/></svg>
          </button>
          
          <!-- Dropdown Menu (child of container, sibling of button) -->
          <div id="lang-dropdown-menu" style="position: absolute; right: 0; top: calc(100% + 8px); display: none; min-width: 120px; z-index: 10002 !important;">
            <div style="background: rgba(0, 51, 36, 0.98) !important; border-radius: 6px; box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.3), 0 10px 10px -5px rgba(0, 0, 0, 0.1); border: 1px solid rgba(255, 255, 255, 0.1); min-width: 120px;">
              <div class="lang-switch" data-lang="vi" style="display: block; width: 100%; padding: 8px 16px; background: transparent; color: white; cursor: pointer; border-top-left-radius: 6px; border-top-right-radius: 6px; text-align: left; transition: background 0.2s ease;" onmouseover="this.style.background='rgba(255,255,255,0.1)'" onmouseout="this.style.background='transparent'">Ti·∫øng Vi·ªát</div>
              <div class="lang-switch" data-lang="en" style="display: block; width: 100%; padding: 8px 16px; background: transparent; color: white; cursor: pointer; text-align: left; transition: background 0.2s ease;" onmouseover="this.style.background='rgba(255,255,255,0.1)'" onmouseout="this.style.background='transparent'">English</div>
              <div class="lang-switch" data-lang="ja" style="display: block; width: 100%; padding: 8px 16px; background: transparent; color: white; cursor: pointer; text-align: left; transition: background 0.2s ease;" onmouseover="this.style.background='rgba(255,255,255,0.1)'" onmouseout="this.style.background='transparent'">Êó•Êú¨Ë™û</div>
              <div class="lang-switch" data-lang="es" style="display: block; width: 100%; padding: 8px 16px; background: transparent; color: white; cursor: pointer; text-align: left; transition: background 0.2s ease;" onmouseover="this.style.background='rgba(255,255,255,0.1)'" onmouseout="this.style.background='transparent'">Espa√±ol</div>
              <div class="lang-switch" data-lang="ko" style="display: block; width: 100%; padding: 8px 16px; background: transparent; color: white; cursor: pointer; border-bottom-left-radius: 6px; border-bottom-right-radius: 6px; text-align: left; transition: background 0.2s ease;" onmouseover="this.style.background='rgba(255,255,255,0.1)'" onmouseout="this.style.background='transparent'">ÌïúÍµ≠Ïñ¥</div>
            </div>
          </div>
        </div>

        <!-- Dark Mode Toggle -->
        <button id="toggle-dark" class="flex items-center gap-2 px-3 py-1 rounded hover:bg-white/10 dark:hover:bg-gray-800/30 transition-all" aria-label="Toggle dark mode">
          <svg id="sun-icon" class="w-5 h-5" fill="var(--color-white2white)" viewBox="0 0 24 24">
            <path d="M12 7a5 5 0 100 10 5 5 0 000-10zM2 13h2a1 1 0 100-2H2a1 1 0 100 2zm18 0h2a1 1 0 100-2h-2a1 1 0 100 2zM11 2v2a1 1 0 102 0V2a1 1 0 10-2 0zm0 18v2a1 1 0 102 0v-2a1 1 0 10-2 0zM5.99 4.58a1 1 0 00-1.41 1.41L5.64 7.05a1 1 0 101.41-1.41L5.99 4.58zm12.37 12.37a1 1 0 00-1.41 1.41l1.06 1.06a1 1 0 001.41-1.41l-1.06-1.06zM19.42 6.01a1 1 0 00-1.41-1.41l-1.06 1.06a1 1 0 101.41 1.41l1.06-1.06zM7.05 18.36a1 1 0 00-1.41 1.41l1.06 1.06a1 1 0 001.41-1.41l-1.06-1.06z"/>
          </svg>
          <svg id="moon-icon" class="w-5 h-5 hidden" viewBox="0 0 24 24" fill="none">
            <path d="M14.5 2C16.32 2 18.03 2.5 19.5 3.35C16.51 5.08 14.5 8.3 14.5 12C14.5 15.7 16.51 18.92 19.5 20.65C18.03 21.5 16.32 22 14.5 22C8.98 22 4.5 17.52 4.5 12C4.5 6.48 8.98 2 14.5 2Z" fill="var(--color-black2white)"/>
          </svg>
        </button>
      </div>
    </div>
  </div>
  
  <!-- Import Navbar component -->
  <Navbar />
</header>

<style>
  #header-container {
    transform: translateY(0);
    transition: transform 0.3s ease;
    will-change: transform;
    position: fixed !important;
    top: 0 !important;
    left: 0 !important;
    right: 0 !important;
    z-index: 9999 !important;
  }
  /* Scroll xu·ªëng: ·∫©n header */
  #header-container.header-hidden {
    transform: translateY(-100%);
  }
</style>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const header = document.getElementById('header-container');
    
    if (!header) {
      console.error('Header container not found');
      return;
    }
    
    let lastScrollY = window.scrollY;
    let ticking = false;

    function onScroll() {
      const currentY = window.scrollY;
      
      // Debug log
      console.log('Scroll position:', currentY, 'Last:', lastScrollY);
      
      if (currentY === 0) {
        // Lu√¥n hi·ªán header khi ·ªü ƒë·∫ßu trang
        header.classList.remove('header-hidden');
        console.log('At top - showing header');
      } else if (currentY > lastScrollY && currentY > 100) {
        // Scroll xu·ªëng: ·∫©n header (tƒÉng threshold l√™n 100px)
        header.classList.add('header-hidden');
        console.log('Scrolling down - hiding header');
      } else if (currentY < lastScrollY) {
        // Scroll l√™n: hi·ªán header
        header.classList.remove('header-hidden');
        console.log('Scrolling up - showing header');
      }
      
      lastScrollY = currentY;
      ticking = false;
    }

    window.addEventListener('scroll', () => {
      if (!ticking) {
        window.requestAnimationFrame(onScroll);
        ticking = true;
      }
    }, { passive: true });

    // Reset header khi resize (tr√°nh l·ªói khi thay ƒë·ªïi layout)
    window.addEventListener('resize', () => {
      header.classList.remove('header-hidden');
      console.log('Window resized - showing header');
    });
    
    // Ki·ªÉm tra header c√≥ t·ªìn t·∫°i
    console.log('Header script loaded, element:', header);
    
    // ƒê·ª£i m·ªôt ch√∫t ƒë·ªÉ ƒë·∫£m b·∫£o DOM ƒë∆∞·ª£c render ho√†n to√†n
    setTimeout(() => {
      // Language dropdown functionality
      const langDropdownBtn = document.getElementById('lang-dropdown-btn');
      const langDropdownMenu = document.getElementById('lang-dropdown-menu');
      const langSwitchButtons = document.querySelectorAll('.lang-switch');
      
      console.log('üîç DEBUG: Language elements found:', {
        button: langDropdownBtn,
        menu: langDropdownMenu,
        switches: langSwitchButtons.length,
        buttonExists: !!langDropdownBtn,
        menuExists: !!langDropdownMenu,
        buttonId: langDropdownBtn?.id,
        menuId: langDropdownMenu?.id
      });
      
      // Toggle dropdown menu
      if (langDropdownBtn && langDropdownMenu) {
        console.log('‚úÖ SETTING UP EVENT LISTENERS...');
        let isDropdownOpen = false;
        let clickTimeout;
        
        langDropdownBtn.addEventListener('click', (e) => {
          e.preventDefault();
          e.stopPropagation();
          console.log('üö® JAVASCRIPT CLICK TRIGGERED!');
          
          // Clear any pending timeout
          clearTimeout(clickTimeout);
          
          // Toggle state
          isDropdownOpen = !isDropdownOpen;
          langDropdownMenu.style.display = isDropdownOpen ? 'block' : 'none';
          langDropdownBtn.setAttribute('aria-expanded', isDropdownOpen.toString());
          console.log('Dropdown is now:', isDropdownOpen ? 'OPEN' : 'CLOSED');
        });
        
        console.log('‚úÖ CLICK LISTENER ADDED SUCCESSFULLY');
        
        // Close dropdown when clicking outside (with debounce)
        document.addEventListener('click', (e) => {
          clearTimeout(clickTimeout);
          clickTimeout = setTimeout(() => {
            if (!langDropdownBtn.contains(e.target) && !langDropdownMenu.contains(e.target) && isDropdownOpen) {
              langDropdownMenu.style.display = 'none';
              langDropdownBtn.setAttribute('aria-expanded', 'false');
              isDropdownOpen = false;
              console.log('Dropdown closed by outside click');
            }
          }, 10);
        });
      } else {
        console.error('Language dropdown elements not found:', {
          button: !!langDropdownBtn,
          menu: !!langDropdownMenu
        });
      }
      
      // Language switch functionality
      langSwitchButtons.forEach((button, index) => {
        button.addEventListener('click', (e) => {
          e.preventDefault();
          const targetLang = button.getAttribute('data-lang');
          console.log(`Language button ${index + 1} clicked:`, targetLang);
          
          const currentPath = window.location.pathname;
          console.log('Current path:', currentPath);
          
          // Remove current language from path
          const pathWithoutLang = currentPath.replace(/^\/(vi|en|es|ja|ko)(\/|$)/, '/');
          console.log('Path without lang:', pathWithoutLang);
          
          // Build new URL with target language
          const newPath = targetLang === 'en' 
            ? pathWithoutLang === '/' ? '/' : pathWithoutLang
            : `/${targetLang}${pathWithoutLang === '/' ? '' : pathWithoutLang}`;
          
          console.log('New path will be:', newPath);
          
          // Navigate to new URL
          window.location.href = newPath;
        });
      });
    }, 100); // ƒê·ª£i 100ms ƒë·ªÉ DOM render xong
  });
</script>
